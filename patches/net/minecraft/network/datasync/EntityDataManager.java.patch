--- a/net/minecraft/network/datasync/EntityDataManager.java
+++ b/net/minecraft/network/datasync/EntityDataManager.java
@@ -5,11 +5,16 @@
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import me.jellysquid.mods.lithium.LithiumConfig;
+import me.jellysquid.mods.lithium.common.util.lock.NullReadWriteLock;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
@@ -26,11 +31,22 @@
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Map < Class <? extends Entity > , Integer > NEXT_ID_MAP = Maps.newHashMap();
     private final Entity entity;
-    private final Map < Integer, EntityDataManager.DataEntry<? >> entries = Maps.newHashMap();
-    private final ReadWriteLock lock = new ReentrantReadWriteLock();
+
+    // Lithium entity.data_tracker.use_arrays replaces Maps.newHashMap with Int2ObjectOpenHashMap
+    private final Map < Integer, EntityDataManager.DataEntry<? >> entries = LithiumConfig.ENTITY_DATA_TRACKER_USE_ARRAYS ?
+            new Int2ObjectOpenHashMap<>() : Maps.newHashMap();
+    // Lithium entity.data_tracker.no_locks
+    private final ReadWriteLock lock = LithiumConfig.ENTITY_DATA_TRACKER_NO_LOCKS ?
+            new NullReadWriteLock() : new ReentrantReadWriteLock();
+
     private boolean empty = true;
     private boolean dirty;
 
+    // Lithium entity.data_tracker.use_arrays
+    private static final int DEFAULT_ENTRY_COUNT = 10, GROW_FACTOR = 8;
+    private EntityDataManager.DataEntry<?>[] entriesArray = new EntityDataManager.DataEntry<?>[DEFAULT_ENTRY_COUNT];
+    // Lithium entity.data_tracker.use_arrays ends
+
     public EntityDataManager(Entity entityIn)
     {
         this.entity = entityIn;
@@ -117,11 +133,50 @@
     {
         EntityDataManager.DataEntry<T> dataentry = new EntityDataManager.DataEntry<>(key, value);
         this.lock.writeLock().lock();
-        this.entries.put(key.getId(), dataentry);
+
+        // Lithium entity.data_tracker.use_arrays
+        if (LithiumConfig.ENTITY_DATA_TRACKER_USE_ARRAYS)
+        {
+            this.onAddTrackedDataInsertMap(this.entries, key.getId(), dataentry);
+        }
+        else
+        {
+            // vanilla
+            this.entries.put(key.getId(), dataentry);
+        }
+
         this.empty = false;
         this.lock.writeLock().unlock();
     }
 
+    /**
+     * Lithium entity.data_tracker.use_arrays
+     * We redirect the call to add a tracked data to the internal map so we can add it to our new storage structure. This
+     * should only ever occur during entity initialization. Type-erasure is a bit of a pain here since we must redirect
+     * a calls to the generic Map interface.
+     */
+    private Object onAddTrackedDataInsertMap(Map<Integer, EntityDataManager.DataEntry<?>> map, /* Integer */ Object keyRaw, /* DataTracker.Entry<?> */ Object valueRaw) {
+        int k = (int) keyRaw;
+        EntityDataManager.DataEntry<?> v = (EntityDataManager.DataEntry<?>) valueRaw;
+
+        EntityDataManager.DataEntry<?>[] storage = this.entriesArray;
+
+        // Check if we need to grow the backing array to accommodate the new key range
+        if (storage.length <= k) {
+            // Grow the array to accommodate 8 entries after this one, but limit it to never be larger
+            // than 256 entries as per the vanilla limit
+            int newSize = Math.min(k + GROW_FACTOR, 256);
+
+            this.entriesArray = storage = Arrays.copyOf(storage, newSize);
+        }
+
+        // Update the storage
+        storage[k] = v;
+
+        // Ensure that the vanilla backing storage is still updated appropriately
+        return this.entries.put(k, v);
+    }
+
     private <T> EntityDataManager.DataEntry<T> getEntry(DataParameter<T> key)
     {
         this.lock.readLock().lock();
@@ -129,7 +184,36 @@
 
         try
         {
-            dataentry = (EntityDataManager.DataEntry<T>)this.entries.get(key.getId());
+            // Lithium entity.data_tracker.use_arrays
+            if (LithiumConfig.ENTITY_DATA_TRACKER_USE_ARRAYS)
+            {
+                EntityDataManager.DataEntry<?>[] array = this.entriesArray;
+
+                // Lithium entity.data_tracker.use_arrays implementation starts
+                int id = key.getId();
+
+                // The vanilla implementation will simply return null if the tracker doesn't contain the specified entry. However,
+                // accessing an array with an invalid pointer will throw a OOB exception, where-as a HashMap would simply
+                // return null. We check this case (which should be free, even if so insignificant, as the subsequent bounds
+                // check will hopefully be eliminated)
+                if (id < 0 || id >= array.length)
+                {
+                    dataentry = null;
+                }
+                else
+                {
+                    // This cast can fail if trying to access a entry which doesn't belong to this tracker, as the ID could
+                    // instead point to an entry of a different type. However, that is also vanilla behaviour.
+                    // noinspection unchecked
+                    dataentry = (EntityDataManager.DataEntry<T>) array[id];
+                }
+            }
+            // Lithium entity.data_tracker.use_arrays implementation ends
+            else
+            {
+                // vanilla
+                dataentry = (EntityDataManager.DataEntry<T>)this.entries.get(key.getId());
+            }
         }
         catch (Throwable throwable)
         {
