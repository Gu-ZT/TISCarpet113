--- a/net/minecraft/tileentity/TileEntityPiston.java
+++ b/net/minecraft/tileentity/TileEntityPiston.java
@@ -1,9 +1,17 @@
 package net.minecraft.tileentity;
 
+import java.util.Arrays;
 import java.util.List;
+import java.util.Optional;
+import java.util.concurrent.ConcurrentHashMap;
+
+import carpet.helpers.CreativeNoClipHelper;
+import carpet.settings.CarpetSettings;
+import me.jellysquid.mods.lithium.LithiumConfig;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockPistonBase;
 import net.minecraft.block.BlockPistonExtension;
+import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
@@ -29,6 +37,8 @@
     private EnumFacing pistonFacing;
     private boolean extending;
     private boolean shouldHeadBeRendered;
+    // [CM] Movable TE's - new var
+    private TileEntity carriedTileEntity;
     private static final ThreadLocal<EnumFacing> MOVING_ENTITY = new ThreadLocal<EnumFacing>()
     {
         protected EnumFacing initialValue()
@@ -40,6 +50,19 @@
     private float lastProgress;
     private long lastTicked;
 
+    // lithium block.moving_block_shapes
+    private static final VoxelShape[] PISTON_BASE_WITH_MOVING_HEAD_SHAPES = precomputePistonBaseWithMovingHeadShapes();
+    @SuppressWarnings("unchecked")
+    private static final ConcurrentHashMap<VoxelShape, VoxelShape>[] SHAPE_TO_OFFSET_SIMPLIFIED_SHAPE = new ConcurrentHashMap[1 + (2 * 6)];
+
+    static {
+        Arrays.setAll(SHAPE_TO_OFFSET_SIMPLIFIED_SHAPE, (int index) -> new ConcurrentHashMap<>());
+    }
+    // lithium block.moving_block_shapes ends
+
+    // TISCM Cache BoundingBoxList creation
+    private List<AxisAlignedBB> voxelShapeBoundingBoxList;
+
     public TileEntityPiston()
     {
         super(TileEntityType.PISTON);
@@ -52,8 +75,103 @@
         this.pistonFacing = pistonFacingIn;
         this.extending = extendingIn;
         this.shouldHeadBeRendered = shouldHeadBeRenderedIn;
+
+        // TISCM Cache BoundingBoxList creation
+        this.createVoxelShapeBoundingBoxListCache();
     }
 
+    // lithium block.moving_block_shapes starts
+
+    /**
+     * We memoize the offset and simplified VoxelShapes that are otherwise constructed on every call of getCollisionShape.
+     * For each offset direction and distance (6 directions, 2 distances each, and no direction with 0 distance) we
+     * store the offset and simplified VoxelShapes in a ConcurrentHashMap when they are accessed the first time.
+     * Concurrency is necessary, because both Render and Server thread are using the cache.
+     * We don't cause a memory leak, because only shapes from the ShapeCache are used. As the ShapeCache is only initialized
+     * once, the number is keys is limited, and therefore the number of entries in the map is bounded.
+     * We are using reference equality, as VoxelShapes do not implement equals.
+     *
+     *
+     * @param blockState2 the block used to determine whether the shape is from the ShapeCache and can be memoized without causing a memory leak
+     * @param blockShape the original shape, must not be modified after passing it as an argument to this method
+     * @param offset     the offset distance
+     * @param direction  the offset direction
+     * @return blockShape offset and simplified
+     */
+    private static VoxelShape getOffsetAndSimplified(IBlockState blockState2, VoxelShape blockShape, float offset, EnumFacing direction) {
+        int indexForOffset = getIndexForOffsetShapes(offset, direction);
+        ConcurrentHashMap<VoxelShape, VoxelShape> shape2OffsetSimplifiedShape = SHAPE_TO_OFFSET_SIMPLIFIED_SHAPE[indexForOffset];
+
+        VoxelShape offsetSimplifiedShape = shape2OffsetSimplifiedShape.get(blockShape);
+        if (offsetSimplifiedShape == null) {
+            offsetSimplifiedShape = blockShape.offset(direction.getXOffset() * offset, direction.getYOffset() * offset, direction.getZOffset() * offset).simplify();
+
+            //All blocks that do not have dynamic bounds have a shape cache. Blocks that have a shape cache will
+            //always return the same blockShape. Therefore the map won't be locking often and won't cause a memory leak.
+            //There are no pushable blocks with dynamic bounds in vanilla survival, but it is possible to get them using commands or other mods.
+            if (!blockState2.getBlock().isVariableOpacity()) {
+                shape2OffsetSimplifiedShape.put(blockShape, offsetSimplifiedShape);
+            }
+        }
+        return offsetSimplifiedShape;
+    }
+
+    /**
+     * Precompute all 18 possible configurations for the merged piston base and head shape.
+     *
+     * @return The array of the merged VoxelShapes, indexed by {@link TileEntityPiston#getIndexForMergedShape(float, EnumFacing)}
+     */
+    private static VoxelShape[] precomputePistonBaseWithMovingHeadShapes() {
+        float[] offsets = {0f, 0.5f, 1f};
+        EnumFacing[] directions = EnumFacing.values();
+
+        VoxelShape[] mergedShapes = new VoxelShape[offsets.length * directions.length];
+
+        for (EnumFacing facing : directions) {
+            VoxelShape baseShape = Blocks.PISTON.getDefaultState().with(BlockPistonBase.EXTENDED, true)
+                    .with(BlockPistonBase.FACING, facing).getCollisionShape(null, null);
+            for (float offset : offsets) {
+                //this cache is only required for the merged piston head + base shape.
+                //this shape is only used when !this.extending
+                //here: isShort = this.extending != 1.0F - this.progress < 4.0F can be simplified to:
+                //isShort = f < 4.0F , because f = getAmountExtended(this.progress) can be simplified to f == 1.0F - this.progress
+                //therefore isShort is dependent on the offset:
+                boolean isShort = offset < 4.0F;
+
+                VoxelShape headShape = (Blocks.PISTON_HEAD.getDefaultState().with(BlockPistonExtension.FACING, facing))
+                        .with(BlockPistonExtension.SHORT, isShort).getCollisionShape(null, null);
+
+                VoxelShape offsetHead = headShape.offset(facing.getXOffset() * offset,
+                        facing.getYOffset() * offset,
+                        facing.getZOffset() * offset);
+                mergedShapes[getIndexForMergedShape(offset, facing)] = VoxelShapes.or(baseShape, offsetHead);
+            }
+
+        }
+
+        return mergedShapes;
+    }
+
+    private static int getIndexForOffsetShapes(float offset, EnumFacing direction) {
+        if (offset != 0f && offset != 0.5f && offset != 1f) {
+            return -1;
+        }
+        if (offset == 0f) {
+            return 0; //can treat offsetting by 0 in all directions the same
+        }
+        return (int) (2 * offset) + 2 * direction.getIndex();
+    }
+
+    private static int getIndexForMergedShape(float offset, EnumFacing direction) {
+        if (offset != 0f && offset != 0.5f && offset != 1f) {
+            return -1;
+        }
+        //shape of offset 0 is still dependent on the direction, due to piston head and base being directional blocks
+        return (int) (2 * offset) + (3 * direction.getIndex());
+    }
+
+    // lithium block.moving_block_shapes ends
+
     public NBTTagCompound getUpdateTag()
     {
         return this.write(new NBTTagCompound());
@@ -112,15 +230,28 @@
         return !this.isExtending() && this.shouldPistonHeadBeRendered() ? Blocks.PISTON_HEAD.getDefaultState().with(BlockPistonExtension.TYPE, this.pistonState.getBlock() == Blocks.STICKY_PISTON ? PistonType.STICKY : PistonType.DEFAULT).with(BlockPistonExtension.FACING, this.pistonState.get(BlockPistonBase.FACING)) : this.pistonState;
     }
 
+    // TISCM Cache BoundingBoxList creation
+    // it's correct if TileEntityPiston will not changes its pos
+    private void createVoxelShapeBoundingBoxListCache()
+    {
+        VoxelShape voxelshape = this.getCollisionRelatedBlockState().getCollisionShape(this.world, this.getPos());
+        this.voxelShapeBoundingBoxList = !voxelshape.isEmpty() ? voxelshape.toBoundingBoxList() : null;
+    }
+
     private void moveCollidedEntities(float p_184322_1_)
     {
         EnumFacing enumfacing = this.getMotionDirection();
         double d0 = (double)(p_184322_1_ - this.progress);
-        VoxelShape voxelshape = this.getCollisionRelatedBlockState().getCollisionShape(this.world, this.getPos());
 
-        if (!voxelshape.isEmpty())
+        // TISCM Cache BoundingBoxList creation
+//        VoxelShape voxelshape = this.getCollisionRelatedBlockState().getCollisionShape(this.world, this.getPos());
+//
+//        if (!voxelshape.isEmpty())
+//        {
+//            List<AxisAlignedBB> list = voxelshape.toBoundingBoxList();
+        if (this.voxelShapeBoundingBoxList != null)
         {
-            List<AxisAlignedBB> list = voxelshape.toBoundingBoxList();
+            List<AxisAlignedBB> list = this.voxelShapeBoundingBoxList;
             AxisAlignedBB axisalignedbb = this.moveByPositionAndProgress(this.getMinMaxPiecesAABB(list));
             List<Entity> list1 = this.world.getEntitiesWithinAABBExcludingEntity((Entity)null, this.getMovementArea(axisalignedbb, enumfacing, d0).union(axisalignedbb));
 
@@ -134,7 +265,7 @@
 
                     if (entity.getPushReaction() != EnumPushReaction.IGNORE)
                     {
-                        if (flag)
+                        if (flag && !CreativeNoClipHelper.canEntityIgnoreClip(entity))  // Carpet creativeNoClip
                         {
                             switch (enumfacing.getAxis())
                             {
@@ -170,14 +301,25 @@
                         if (!(d1 <= 0.0D))
                         {
                             d1 = Math.min(d1, d0) + 0.01D;
-                            MOVING_ENTITY.set(enumfacing);
-                            entity.move(MoverType.PISTON, d1 * (double)enumfacing.getXOffset(), d1 * (double)enumfacing.getYOffset(), d1 * (double)enumfacing.getZOffset());
-                            MOVING_ENTITY.set((EnumFacing)null);
 
+                            if (!CreativeNoClipHelper.canEntityIgnoreClip(entity))  // Carpet creativeNoClip
+                            {
+                                MOVING_ENTITY.set(enumfacing);
+                                entity.move(MoverType.PISTON, d1 * (double) enumfacing.getXOffset(), d1 * (double) enumfacing.getYOffset(), d1 * (double) enumfacing.getZOffset());
+                                MOVING_ENTITY.set((EnumFacing) null);
+                            }
+
                             if (!this.extending && this.shouldHeadBeRendered)
                             {
                                 this.fixEntityWithinPistonBase(entity, enumfacing, d0);
                             }
+
+                            // [CM] Added UnloadedEntityFix
+                            if (CarpetSettings.unloadedEntityFix)
+                            {
+                                world.tickEntity(entity, false);
+                            }
+                            // [CM] End
                         }
                     }
                 }
@@ -270,9 +412,12 @@
             if (Math.abs(d0 - d1) < 0.01D)
             {
                 d0 = Math.min(d0, p_190605_3_) + 0.01D;
-                MOVING_ENTITY.set(p_190605_2_);
-                p_190605_1_.move(MoverType.PISTON, d0 * (double)enumfacing.getXOffset(), d0 * (double)enumfacing.getYOffset(), d0 * (double)enumfacing.getZOffset());
-                MOVING_ENTITY.set((EnumFacing)null);
+                if (!CreativeNoClipHelper.canEntityIgnoreClip(p_190605_1_))  // Carpet creativeNoClip
+                {
+                    MOVING_ENTITY.set(p_190605_2_);
+                    p_190605_1_.move(MoverType.PISTON, d0 * (double) enumfacing.getXOffset(), d0 * (double) enumfacing.getYOffset(), d0 * (double) enumfacing.getZOffset());
+                    MOVING_ENTITY.set((EnumFacing) null);
+                }
             }
         }
     }
@@ -319,9 +464,38 @@
                     iblockstate = Block.getValidBlockForPosition(this.pistonState, this.world, this.pos);
                 }
 
-                this.world.setBlockState(this.pos, iblockstate, 3);
-                this.world.neighborChanged(this.pos, iblockstate.getBlock(), this.pos);
+                // [CM] Movable TE's CARPET-DeadlyMC
+                if (!CarpetSettings.movableTileEntities)
+                {
+                    this.world.setBlockState(this.pos, iblockstate, 3);
+                    this.world.neighborChanged(this.pos, iblockstate.getBlock(), this.pos);
+                }
+                else
+                {
+                    this.placeBlock(iblockstate);
+                }
             }
+            // [CM] Movable TE's CARPET-DeadlyMC
+            // comment from fabric-carpet:
+            //     Handle TNT Explosions or other ways the moving Block is broken
+            //     Also /setblock will cause this to be called, and drop e.g. a moving chest's contents.
+            //     This is MC-40380 (BlockEntities that aren't Inventories drop stuff when setblock is called )
+            else if (CarpetSettings.movableTileEntities)
+            {
+                IBlockState iblockstate;
+                if (this.shouldHeadBeRendered)
+                {
+                    iblockstate = Blocks.AIR.getDefaultState();
+                }
+                else
+                {
+                    iblockstate = Block.getValidBlockForPosition(this.pistonState, this.world, this.pos);
+                }
+                if (this.carriedTileEntity != null && this.world.getBlockState(this.pos).getBlock() == Blocks.AIR) {
+                    this.placeBlock(iblockstate);  // qwq
+                    this.world.removeBlock(this.pos);
+                }
+            }
         }
     }
 
@@ -351,8 +525,15 @@
                         iblockstate = iblockstate.with(BlockStateProperties.WATERLOGGED, Boolean.valueOf(false));
                     }
 
-                    this.world.setBlockState(this.pos, iblockstate, 67);
-                    this.world.neighborChanged(this.pos, iblockstate.getBlock(), this.pos);
+                    if (!CarpetSettings.movableTileEntities)
+                    {
+                        this.world.setBlockState(this.pos, iblockstate, 67);
+                        this.world.neighborChanged(this.pos, iblockstate.getBlock(), this.pos);
+                    }
+                    else
+                    {
+                        this.placeBlock(iblockstate);
+                    }
                 }
             }
         }
@@ -378,6 +559,18 @@
         this.lastProgress = this.progress;
         this.extending = compound.getBoolean("extending");
         this.shouldHeadBeRendered = compound.getBoolean("source");
+    
+        // [CM] Movable TE's CARPET-DeadlyMC
+        if(CarpetSettings.movableTileEntities && compound.contains("carriedTileEntityCM", 10))
+        {
+            if(this.pistonState.getBlock() instanceof ITileEntityProvider)
+                this.carriedTileEntity = ((ITileEntityProvider)(this.pistonState.getBlock())).createNewTileEntity(this.world);
+            if(carriedTileEntity != null) // Can actually be null, as BlockPistonMoving.createNewTileEntity(...) returns null
+                this.carriedTileEntity.read(compound.getCompound("carriedTileEntityCM"));
+        }
+
+        // Cache BoundingBoxList creation
+        this.createVoxelShapeBoundingBoxListCache();
     }
 
     public NBTTagCompound write(NBTTagCompound compound)
@@ -388,12 +581,19 @@
         compound.putFloat("progress", this.lastProgress);
         compound.putBoolean("extending", this.extending);
         compound.putBoolean("source", this.shouldHeadBeRendered);
+    
+        // [CM] Movable TE's CARPET-DeadlyMC
+        if(CarpetSettings.movableTileEntities && this.carriedTileEntity != null)
+        {
+            compound.put("carriedTileEntityCM", this.carriedTileEntity.write(new NBTTagCompound()));
+        }
+        
         return compound;
     }
 
     public VoxelShape getCollisionShape(IBlockReader p_195508_1_, BlockPos p_195508_2_)
     {
-        VoxelShape voxelshape;
+        VoxelShape voxelshape;  // piston base voxel shape for piston block retracting
 
         if (!this.extending && this.shouldHeadBeRendered)
         {
@@ -424,6 +624,32 @@
             }
 
             float f = this.getExtendedProgress(this.progress);
+
+            // lithium block.moving_block_shapes
+            if (LithiumConfig.BLOCK_MOVING_BLOCK_SHAPES)
+            {
+                if (this.extending || !this.shouldHeadBeRendered)
+                {
+                    //here voxelshape.isEmpty() is guaranteed, vanilla code would call union() which calls simplify()
+                    VoxelShape blockShape = iblockstate.getCollisionShape(world, pos);
+
+                    //we cache the simplified shapes, as the simplify() method costs a lot of CPU time and allocates several objects
+                    VoxelShape offsetAndSimplified = getOffsetAndSimplified(iblockstate, blockShape, Math.abs(f), f < 0f ? this.pistonFacing.getOpposite() : this.pistonFacing);
+                    return offsetAndSimplified;
+                }
+                else
+                {
+                    //retracting piston heads have to act like their base as well, as the base block is replaced with the moving block
+                    //f >= 0f is guaranteed (assuming no other mod interferes)
+                    int index = getIndexForMergedShape(f, this.pistonFacing);
+                    if (index != -1)
+                    {
+                        return PISTON_BASE_WITH_MOVING_HEAD_SHAPES[index];
+                    }
+                }
+            }
+            // lithium block.moving_block_shapes ends
+
             double d0 = (double)((float)this.pistonFacing.getXOffset() * f);
             double d1 = (double)((float)this.pistonFacing.getYOffset() * f);
             double d2 = (double)((float)this.pistonFacing.getZOffset() * f);
@@ -435,4 +661,37 @@
     {
         return this.lastTicked;
     }
+    
+    // [CM] Movable TE's - helper method
+    public void setCarriedTileEntity(TileEntity tileEntity)
+    {
+        this.carriedTileEntity = tileEntity;
+    }
+    
+    // [CM] Movable TE's - helper method
+    private void placeBlock(IBlockState targetState)
+    {
+        this.world.setBlockState(this.pos, targetState, 18); //Flag 18 => No block updates, TileEntity has to be placed first
+        
+        if(!this.world.isRemote)
+        {
+            if(carriedTileEntity != null)
+            {
+                this.world.removeTileEntity(this.pos);
+                carriedTileEntity.validate();
+                this.world.setTileEntity(this.pos, carriedTileEntity);
+            }
+            
+            //Update neighbors, comparators and observers now (same order as setBlockState would have if flag was set to 3 (default))
+            //This should not change piston behavior for vanilla-pushable blocks at all
+            
+            this.world.notifyNeighbors(pos, Blocks.MOVING_PISTON);
+            if (targetState.hasComparatorInputOverride())
+            {
+                this.world.updateComparatorOutputLevel(pos, targetState.getBlock());
+            }
+            this.world.notifyNeighborsOfStateChange(pos, targetState.getBlock());
+        }
+        this.world.neighborChanged(this.pos, targetState.getBlock(), this.pos);
+    }
 }
