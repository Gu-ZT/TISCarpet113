--- a/net/minecraft/entity/EntityLiving.java
+++ b/net/minecraft/entity/EntityLiving.java
@@ -1,7 +1,12 @@
 package net.minecraft.entity;
 
+import carpet.commands.lifetime.removal.LiteralRemovalReason;
+import carpet.logging.logHelpers.DamageReporter;
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Maps;
+
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
@@ -9,6 +14,7 @@
 import net.minecraft.block.BlockAbstractSkull;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
+import net.minecraft.entity.ai.EntityAIBase;
 import net.minecraft.entity.ai.EntityAITasks;
 import net.minecraft.entity.ai.EntityJumpHelper;
 import net.minecraft.entity.ai.EntityLookHelper;
@@ -75,6 +81,9 @@
     protected PathNavigate navigator;
     protected final EntityAITasks tasks;
     protected final EntityAITasks targetTasks;
+    //[CM scarpet]
+    public final Map<String, EntityAIBase> temporaryTasks = new HashMap<>();
+    //
     private EntityLivingBase attackTarget;
     private final EntitySenses senses;
     private final NonNullList<ItemStack> inventoryHands = NonNullList.withSize(2, ItemStack.EMPTY);
@@ -90,6 +99,9 @@
     private Entity leashHolder;
     private NBTTagCompound leashNBTTag;
 
+    // Lithium alloc.enum_values
+    private static final EntityEquipmentSlot[] SLOTS = EntityEquipmentSlot.values();
+
     protected EntityLiving(EntityType<?> type, World worldIn)
     {
         super(type, worldIn);
@@ -110,6 +122,13 @@
         }
     }
 
+    //[CM scarpet - access to tasks
+    public EntityAITasks getAI(boolean target)
+    {
+        return target?targetTasks:tasks;
+    }
+
+
     protected void initEntityAI()
     {
     }
@@ -423,6 +442,11 @@
 
             compound.put("Leash", nbttagcompound2);
         }
+        // [CM] Lead fix - Makes sure the leashNBTTag data is preseved
+        else if (CarpetSettings.leadFix && leashNBTTag != null)
+        {
+            compound.put("Leash", leashNBTTag);
+        }
 
         compound.putBoolean("LeftHanded", this.isLeftHanded());
 
@@ -617,6 +641,9 @@
                     this.inventoryArmorDropChances[entityequipmentslot.getIndex()] = 2.0F;
             }
 
+            // TISCM lifetime tracker
+            this.recordRemoval(LiteralRemovalReason.PERSISTENT);
+
             this.persistenceRequired = true;
             this.onItemPickup(itemEntity, itemstack.getCount());
             itemEntity.remove();
@@ -714,11 +741,13 @@
 
                 if (this.canDespawn() && d3 > 16384.0D)
                 {
+                    this.recordRemoval(LiteralRemovalReason.DESPAWN);  // TISCM lifetime tracker
                     this.remove();
                 }
 
                 if (this.idleTime > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D && this.canDespawn())
                 {
+                    this.recordRemoval(LiteralRemovalReason.DESPAWN);  // TISCM lifetime tracker
                     this.remove();
                 }
                 else if (d3 < 1024.0D)
@@ -912,7 +941,8 @@
 
     protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier)
     {
-        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
+        // Lithium alloc.enum_values
+        for (EntityEquipmentSlot entityequipmentslot :SLOTS)
         {
             ItemStack itemstack = this.getItemStackFromSlot(entityequipmentslot);
             float f = this.getDropChance(entityequipmentslot);
@@ -973,7 +1003,8 @@
 
             boolean flag = true;
 
-            for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
+            // Lithium alloc.enum_values
+            for (EntityEquipmentSlot entityequipmentslot :SLOTS)
             {
                 if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR)
                 {
@@ -1136,7 +1167,8 @@
             this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItemMainhand(), (int)(5.0F + f * (float)this.rand.nextInt(18)), false));
         }
 
-        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
+        // Lithium alloc.enum_values
+        for (EntityEquipmentSlot entityequipmentslot :SLOTS)
         {
             if (entityequipmentslot.getSlotType() == EntityEquipmentSlot.Type.ARMOR)
             {
@@ -1174,6 +1206,9 @@
 
     public void enablePersistence()
     {
+        // TISCM lifetime tracker
+        this.recordRemoval(LiteralRemovalReason.PERSISTENT);
+
         this.persistenceRequired = true;
     }
 
@@ -1447,10 +1482,16 @@
         float f = (float)this.getAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getValue();
         int i = 0;
 
+        // CM
+        DamageReporter.register_damage_attacker( entityIn, this, f);
+        float ff = f;
+        // end CM
+
         if (entityIn instanceof EntityLivingBase)
         {
             f += EnchantmentHelper.getModifierForCreature(this.getHeldItemMainhand(), ((EntityLivingBase)entityIn).getCreatureAttribute());
             i += EnchantmentHelper.getKnockbackModifier(this);
+            DamageReporter.modify_damage((EntityLivingBase)entityIn, DamageSource.causeMobDamage(this), ff, f, "attacker enchants"); // CM
         }
 
         boolean flag = entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), f);
