--- a/net/minecraft/entity/item/EntityItem.java
+++ b/net/minecraft/entity/item/EntityItem.java
@@ -2,6 +2,12 @@
 
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import carpet.commands.lifetime.removal.LiteralRemovalReason;
+import carpet.commands.lifetime.removal.MobPickupRemovalReason;
+import carpet.helpers.InventoryHelper;
+import carpet.settings.CarpetSettings;
+import net.minecraft.block.BlockShulkerBox;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.MoverType;
@@ -9,6 +15,7 @@
 import net.minecraft.init.Items;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.item.Item;
+import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTUtil;
@@ -37,6 +44,12 @@
     private UUID owner;
     public float hoverStart = (float)(Math.random() * Math.PI * 2.0D);
 
+    //CM required for entityinfo / scarpet API
+    public int ssGetAge()
+    {
+        return this.age;
+    }
+
     public EntityItem(World worldIn)
     {
         super(EntityType.ITEM, worldIn);
@@ -57,6 +70,15 @@
     {
         this(worldIn, x, y, z);
         this.setItem(stack);
+
+        if (CarpetSettings.stackableShulkerBoxes
+                && stack.getItem() instanceof ItemBlock
+                && ((ItemBlock)stack.getItem()).getBlock() instanceof BlockShulkerBox)
+        {
+            if (InventoryHelper.cleanUpShulkerBoxTag(stack)) {
+                this.setItem(stack);
+            }
+        }
     }
 
     protected boolean canTriggerWalking()
@@ -166,6 +188,7 @@
 
             if (!this.world.isRemote && this.age >= 6000)
             {
+                this.recordRemoval(LiteralRemovalReason.DESPAWN_TIMEOUT);  // TISCM lifetime tracker
                 this.remove();
             }
         }
@@ -205,8 +228,12 @@
             {
                 if (this.age != -32768 && other.age != -32768)
                 {
-                    if (itemstack1.getItem() != itemstack.getItem())
+                    if (this.tryStackShulkerBoxes(other))
                     {
+                        return true;
+                    }
+                    else if (itemstack1.getItem() != itemstack.getItem())
+                    {
                         return false;
                     }
                     else if (itemstack1.hasTag() ^ itemstack.hasTag())
@@ -229,12 +256,17 @@
                     {
                         return false;
                     }
+                    else if (!itemstack1.isStackable() && !itemstack.isStackable())
+                    {
+                        return false;
+                    }
                     else
                     {
                         itemstack1.grow(itemstack.getCount());
                         other.pickupDelay = Math.max(other.pickupDelay, this.pickupDelay);
                         other.age = Math.min(other.age, this.age);
                         other.setItem(itemstack1);
+                        this.recordRemoval(LiteralRemovalReason.MERGE);  // TISCM lifetime tracker
                         this.remove();
                         return true;
                     }
@@ -282,6 +314,7 @@
 
             if (this.health <= 0)
             {
+                this.setDeathDamageSource(source);  // TISCM lifetime tracker
                 this.remove();
             }
 
@@ -354,6 +387,7 @@
 
                 if (itemstack.isEmpty())
                 {
+                    this.recordRemoval(new MobPickupRemovalReason(entityIn.getType()));  // TISCM lifetime tracker
                     this.remove();
                     itemstack.setCount(i);
                 }
@@ -460,4 +494,44 @@
         this.setInfinitePickupDelay();
         this.age = 5999;
     }
+
+    // CM start
+    private boolean tryStackShulkerBoxes(EntityItem other)
+    {
+        ItemStack selfStack = this.getItem().copy();
+        if (!CarpetSettings.stackableShulkerBoxes
+                || !(selfStack.getItem() instanceof ItemBlock)
+                || !(((ItemBlock)selfStack.getItem()).getBlock() instanceof BlockShulkerBox))
+        {
+            return false;
+        }
+
+        ItemStack otherStack = other.getItem().copy();
+        if (selfStack.getItem() == otherStack.getItem()
+                && !InventoryHelper.shulkerBoxHasItems(selfStack)
+                && selfStack.hasTag() == otherStack.hasTag()
+                && selfStack.getCount() + otherStack.getCount() <= CarpetSettings.SHULKERBOX_MAX_STACK_AMOUNT)
+        {
+            int amount = Math.min(otherStack.getCount(), CarpetSettings.SHULKERBOX_MAX_STACK_AMOUNT - selfStack.getCount());
+
+            selfStack.grow(amount);
+            this.setItem(selfStack);
+
+            this.pickupDelay = Math.max(other.pickupDelay, this.pickupDelay);
+            this.age = Math.min(other.age, this.age);
+
+            otherStack.shrink(amount);
+            if (otherStack.isEmpty())
+            {
+                other.remove();
+            }
+            else
+            {
+                other.setItem(otherStack);
+            }
+            return true;
+        }
+
+        return false;
+    }
 }
