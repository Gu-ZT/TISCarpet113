--- a/net/minecraft/inventory/Container.java
+++ b/net/minecraft/inventory/Container.java
@@ -1,13 +1,17 @@
 package net.minecraft.inventory;
 
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
 import java.util.List;
 import java.util.Set;
 import javax.annotation.Nullable;
+
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.player.InventoryPlayer;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.network.play.server.SPacketSetSlot;
@@ -18,8 +22,7 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
-public abstract class Container
-{
+public abstract class Container {
     public NonNullList<ItemStack> inventoryItemStacks = NonNullList.create();
     public List<Slot> inventorySlots = Lists.newArrayList();
     public int windowId;
@@ -31,22 +34,17 @@
     protected List<IContainerListener> listeners = Lists.newArrayList();
     private final Set<EntityPlayer> playerList = Sets.newHashSet();
 
-    protected Slot addSlot(Slot slotIn)
-    {
+    protected Slot addSlot(Slot slotIn) {
         slotIn.slotNumber = this.inventorySlots.size();
         this.inventorySlots.add(slotIn);
         this.inventoryItemStacks.add(ItemStack.EMPTY);
         return slotIn;
     }
 
-    public void addListener(IContainerListener listener)
-    {
-        if (this.listeners.contains(listener))
-        {
+    public void addListener(IContainerListener listener) {
+        if (this.listeners.contains(listener)) {
             throw new IllegalArgumentException("Listener already listening");
-        }
-        else
-        {
+        } else {
             this.listeners.add(listener);
             listener.sendAllContents(this, this.getInventory());
             this.detectAndSendChanges();
@@ -54,57 +52,46 @@
     }
 
     @OnlyIn(Dist.CLIENT)
-    public void removeListener(IContainerListener listener)
-    {
+    public void removeListener(IContainerListener listener) {
         this.listeners.remove(listener);
     }
 
-    public NonNullList<ItemStack> getInventory()
-    {
+    public NonNullList<ItemStack> getInventory() {
         NonNullList<ItemStack> nonnulllist = NonNullList.create();
 
-        for (int i = 0; i < this.inventorySlots.size(); ++i)
-        {
+        for (int i = 0; i < this.inventorySlots.size(); ++i) {
             nonnulllist.add(this.inventorySlots.get(i).getStack());
         }
 
         return nonnulllist;
     }
 
-    public void detectAndSendChanges()
-    {
-        for (int i = 0; i < this.inventorySlots.size(); ++i)
-        {
+    public void detectAndSendChanges() {
+        for (int i = 0; i < this.inventorySlots.size(); ++i) {
             ItemStack itemstack = this.inventorySlots.get(i).getStack();
             ItemStack itemstack1 = this.inventoryItemStacks.get(i);
 
-            if (!ItemStack.areItemStacksEqual(itemstack1, itemstack))
-            {
+            if (!ItemStack.areItemStacksEqual(itemstack1, itemstack)) {
                 itemstack1 = itemstack.isEmpty() ? ItemStack.EMPTY : itemstack.copy();
                 this.inventoryItemStacks.set(i, itemstack1);
 
-                for (int j = 0; j < this.listeners.size(); ++j)
-                {
+                for (int j = 0; j < this.listeners.size(); ++j) {
                     this.listeners.get(j).sendSlotContents(this, i, itemstack1);
                 }
             }
         }
     }
 
-    public boolean enchantItem(EntityPlayer playerIn, int id)
-    {
+    public boolean enchantItem(EntityPlayer playerIn, int id) {
         return false;
     }
 
     @Nullable
-    public Slot getSlotFromInventory(IInventory inv, int slotIn)
-    {
-        for (int i = 0; i < this.inventorySlots.size(); ++i)
-        {
+    public Slot getSlotFromInventory(IInventory inv, int slotIn) {
+        for (int i = 0; i < this.inventorySlots.size(); ++i) {
             Slot slot = this.inventorySlots.get(i);
 
-            if (slot.isHere(inv, slotIn))
-            {
+            if (slot.isHere(inv, slotIn)) {
                 return slot;
             }
         }
@@ -112,79 +99,71 @@
         return null;
     }
 
-    public Slot getSlot(int slotId)
-    {
+    public Slot getSlot(int slotId) {
         return this.inventorySlots.get(slotId);
     }
 
-    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
-    {
+    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
         Slot slot = this.inventorySlots.get(index);
         return slot != null ? slot.getStack() : ItemStack.EMPTY;
     }
 
-    public ItemStack slotClick(int slotId, int dragType, ClickType clickTypeIn, EntityPlayer player)
-    {
+    public ItemStack slotClick(int slotId, int dragType, ClickType clickTypeIn, EntityPlayer player) {
+        if (slotId >= 0) {
+            Slot slot = this.getSlot(slotId);
+            ItemStack itemStack = slot.getStack();
+            if (itemStack.getTag() != null) {
+                if (itemStack.getTag().get("GcaClear") != null) {
+                    if (itemStack.getTag().getBoolean("GcaClear")) {
+                        itemStack.setCount(0);
+                        return ItemStack.EMPTY;
+                    }
+                }
+            }
+        }
+
         ItemStack itemstack = ItemStack.EMPTY;
         InventoryPlayer inventoryplayer = player.inventory;
 
-        if (clickTypeIn == ClickType.QUICK_CRAFT)
-        {
+        if (clickTypeIn == ClickType.QUICK_CRAFT) {
             int j1 = this.dragEvent;
             this.dragEvent = getDragEvent(dragType);
 
-            if ((j1 != 1 || this.dragEvent != 2) && j1 != this.dragEvent)
-            {
+            if ((j1 != 1 || this.dragEvent != 2) && j1 != this.dragEvent) {
                 this.resetDrag();
-            }
-            else if (inventoryplayer.getItemStack().isEmpty())
-            {
+            } else if (inventoryplayer.getItemStack().isEmpty()) {
                 this.resetDrag();
-            }
-            else if (this.dragEvent == 0)
-            {
+            } else if (this.dragEvent == 0) {
                 this.dragMode = extractDragMode(dragType);
 
-                if (isValidDragMode(this.dragMode, player))
-                {
+                if (isValidDragMode(this.dragMode, player)) {
                     this.dragEvent = 1;
                     this.dragSlots.clear();
-                }
-                else
-                {
+                } else {
                     this.resetDrag();
                 }
-            }
-            else if (this.dragEvent == 1)
-            {
+            } else if (this.dragEvent == 1) {
                 Slot slot7 = this.inventorySlots.get(slotId);
                 ItemStack itemstack12 = inventoryplayer.getItemStack();
 
-                if (slot7 != null && canAddItemToSlot(slot7, itemstack12, true) && slot7.isItemValid(itemstack12) && (this.dragMode == 2 || itemstack12.getCount() > this.dragSlots.size()) && this.canDragIntoSlot(slot7))
-                {
+                if (slot7 != null && canAddItemToSlot(slot7, itemstack12, true) && slot7.isItemValid(itemstack12) && (this.dragMode == 2 || itemstack12.getCount() > this.dragSlots.size()) && this.canDragIntoSlot(slot7)) {
                     this.dragSlots.add(slot7);
                 }
-            }
-            else if (this.dragEvent == 2)
-            {
-                if (!this.dragSlots.isEmpty())
-                {
+            } else if (this.dragEvent == 2) {
+                if (!this.dragSlots.isEmpty()) {
                     ItemStack itemstack9 = inventoryplayer.getItemStack().copy();
                     int k1 = inventoryplayer.getItemStack().getCount();
 
-                    for (Slot slot8 : this.dragSlots)
-                    {
+                    for (Slot slot8 : this.dragSlots) {
                         ItemStack itemstack13 = inventoryplayer.getItemStack();
 
-                        if (slot8 != null && canAddItemToSlot(slot8, itemstack13, true) && slot8.isItemValid(itemstack13) && (this.dragMode == 2 || itemstack13.getCount() >= this.dragSlots.size()) && this.canDragIntoSlot(slot8))
-                        {
+                        if (slot8 != null && canAddItemToSlot(slot8, itemstack13, true) && slot8.isItemValid(itemstack13) && (this.dragMode == 2 || itemstack13.getCount() >= this.dragSlots.size()) && this.canDragIntoSlot(slot8)) {
                             ItemStack itemstack14 = itemstack9.copy();
                             int j3 = slot8.getHasStack() ? slot8.getStack().getCount() : 0;
                             computeStackSize(this.dragSlots, this.dragMode, itemstack14, j3);
                             int k3 = Math.min(itemstack14.getMaxStackSize(), slot8.getItemStackLimit(itemstack14));
 
-                            if (itemstack14.getCount() > k3)
-                            {
+                            if (itemstack14.getCount() > k3) {
                                 itemstack14.setCount(k3);
                             }
 
@@ -198,144 +177,103 @@
                 }
 
                 this.resetDrag();
-            }
-            else
-            {
+            } else {
                 this.resetDrag();
             }
-        }
-        else if (this.dragEvent != 0)
-        {
+        } else if (this.dragEvent != 0) {
             this.resetDrag();
-        }
-        else if ((clickTypeIn == ClickType.PICKUP || clickTypeIn == ClickType.QUICK_MOVE) && (dragType == 0 || dragType == 1))
-        {
-            if (slotId == -999)
-            {
-                if (!inventoryplayer.getItemStack().isEmpty())
-                {
-                    if (dragType == 0)
-                    {
+        } else if ((clickTypeIn == ClickType.PICKUP || clickTypeIn == ClickType.QUICK_MOVE) && (dragType == 0 || dragType == 1)) {
+            if (slotId == -999) {
+                if (!inventoryplayer.getItemStack().isEmpty()) {
+                    if (dragType == 0) {
                         player.dropItem(inventoryplayer.getItemStack(), true);
                         inventoryplayer.setItemStack(ItemStack.EMPTY);
                     }
 
-                    if (dragType == 1)
-                    {
+                    if (dragType == 1) {
                         player.dropItem(inventoryplayer.getItemStack().split(1), true);
                     }
                 }
-            }
-            else if (clickTypeIn == ClickType.QUICK_MOVE)
-            {
-                if (slotId < 0)
-                {
+            } else if (clickTypeIn == ClickType.QUICK_MOVE) {
+                if (slotId < 0) {
                     return ItemStack.EMPTY;
                 }
 
                 Slot slot5 = this.inventorySlots.get(slotId);
 
-                if (slot5 == null || !slot5.canTakeStack(player))
-                {
+                if (slot5 == null || !slot5.canTakeStack(player)) {
                     return ItemStack.EMPTY;
                 }
 
-                for (ItemStack itemstack7 = this.transferStackInSlot(player, slotId); !itemstack7.isEmpty() && ItemStack.areItemsEqual(slot5.getStack(), itemstack7); itemstack7 = this.transferStackInSlot(player, slotId))
-                {
+                for (ItemStack itemstack7 = this.transferStackInSlot(player, slotId); !itemstack7.isEmpty() && ItemStack.areItemsEqual(slot5.getStack(), itemstack7); itemstack7 = this.transferStackInSlot(player, slotId)) {
                     itemstack = itemstack7.copy();
                 }
-            }
-            else
-            {
-                if (slotId < 0)
-                {
+            } else {
+                if (slotId < 0) {
                     return ItemStack.EMPTY;
                 }
 
                 Slot slot6 = this.inventorySlots.get(slotId);
 
-                if (slot6 != null)
-                {
+                if (slot6 != null) {
                     ItemStack itemstack8 = slot6.getStack();
                     ItemStack itemstack11 = inventoryplayer.getItemStack();
 
-                    if (!itemstack8.isEmpty())
-                    {
+                    if (!itemstack8.isEmpty()) {
                         itemstack = itemstack8.copy();
                     }
 
-                    if (itemstack8.isEmpty())
-                    {
-                        if (!itemstack11.isEmpty() && slot6.isItemValid(itemstack11))
-                        {
+                    if (itemstack8.isEmpty()) {
+                        if (!itemstack11.isEmpty() && slot6.isItemValid(itemstack11)) {
                             int j2 = dragType == 0 ? itemstack11.getCount() : 1;
 
-                            if (j2 > slot6.getItemStackLimit(itemstack11))
-                            {
+                            if (j2 > slot6.getItemStackLimit(itemstack11)) {
                                 j2 = slot6.getItemStackLimit(itemstack11);
                             }
 
                             slot6.putStack(itemstack11.split(j2));
                         }
-                    }
-                    else if (slot6.canTakeStack(player))
-                    {
-                        if (itemstack11.isEmpty())
-                        {
-                            if (itemstack8.isEmpty())
-                            {
+                    } else if (slot6.canTakeStack(player)) {
+                        if (itemstack11.isEmpty()) {
+                            if (itemstack8.isEmpty()) {
                                 slot6.putStack(ItemStack.EMPTY);
                                 inventoryplayer.setItemStack(ItemStack.EMPTY);
-                            }
-                            else
-                            {
+                            } else {
                                 int k2 = dragType == 0 ? itemstack8.getCount() : (itemstack8.getCount() + 1) / 2;
                                 inventoryplayer.setItemStack(slot6.decrStackSize(k2));
 
-                                if (itemstack8.isEmpty())
-                                {
+                                if (itemstack8.isEmpty()) {
                                     slot6.putStack(ItemStack.EMPTY);
                                 }
 
                                 slot6.onTake(player, inventoryplayer.getItemStack());
                             }
-                        }
-                        else if (slot6.isItemValid(itemstack11))
-                        {
-                            if (areItemsAndTagsEqual(itemstack8, itemstack11))
-                            {
+                        } else if (slot6.isItemValid(itemstack11)) {
+                            if (areItemsAndTagsEqual(itemstack8, itemstack11)) {
                                 int l2 = dragType == 0 ? itemstack11.getCount() : 1;
 
-                                if (l2 > slot6.getItemStackLimit(itemstack11) - itemstack8.getCount())
-                                {
+                                if (l2 > slot6.getItemStackLimit(itemstack11) - itemstack8.getCount()) {
                                     l2 = slot6.getItemStackLimit(itemstack11) - itemstack8.getCount();
                                 }
 
-                                if (l2 > itemstack11.getMaxStackSize() - itemstack8.getCount())
-                                {
+                                if (l2 > itemstack11.getMaxStackSize() - itemstack8.getCount()) {
                                     l2 = itemstack11.getMaxStackSize() - itemstack8.getCount();
                                 }
 
                                 itemstack11.shrink(l2);
                                 itemstack8.grow(l2);
-                            }
-                            else if (itemstack11.getCount() <= slot6.getItemStackLimit(itemstack11))
-                            {
+                            } else if (itemstack11.getCount() <= slot6.getItemStackLimit(itemstack11)) {
                                 slot6.putStack(itemstack11);
                                 inventoryplayer.setItemStack(itemstack8);
                             }
-                        }
-                        else if (itemstack11.getMaxStackSize() > 1 && areItemsAndTagsEqual(itemstack8, itemstack11) && !itemstack8.isEmpty())
-                        {
+                        } else if (itemstack11.getMaxStackSize() > 1 && areItemsAndTagsEqual(itemstack8, itemstack11) && !itemstack8.isEmpty()) {
                             int i3 = itemstack8.getCount();
 
-                            if (i3 + itemstack11.getCount() <= itemstack11.getMaxStackSize())
-                            {
+                            if (i3 + itemstack11.getCount() <= itemstack11.getMaxStackSize()) {
                                 itemstack11.grow(i3);
                                 itemstack8 = slot6.decrStackSize(i3);
 
-                                if (itemstack8.isEmpty())
-                                {
+                                if (itemstack8.isEmpty()) {
                                     slot6.putStack(ItemStack.EMPTY);
                                 }
 
@@ -347,115 +285,96 @@
                     slot6.onSlotChanged();
                 }
             }
-        }
-        else if (clickTypeIn == ClickType.SWAP && dragType >= 0 && dragType < 9)
-        {
+        } else if (clickTypeIn == ClickType.SWAP && dragType >= 0 && dragType < 9) {
             Slot slot4 = this.inventorySlots.get(slotId);
             ItemStack itemstack6 = inventoryplayer.getStackInSlot(dragType);
             ItemStack itemstack10 = slot4.getStack();
 
-            if (!itemstack6.isEmpty() || !itemstack10.isEmpty())
-            {
-                if (itemstack6.isEmpty())
-                {
-                    if (slot4.canTakeStack(player))
-                    {
+            if (!itemstack6.isEmpty() || !itemstack10.isEmpty()) {
+                if (itemstack6.isEmpty()) {
+                    if (slot4.canTakeStack(player)) {
                         inventoryplayer.setInventorySlotContents(dragType, itemstack10);
                         slot4.onSwapCraft(itemstack10.getCount());
                         slot4.putStack(ItemStack.EMPTY);
                         slot4.onTake(player, itemstack10);
                     }
-                }
-                else if (itemstack10.isEmpty())
-                {
-                    if (slot4.isItemValid(itemstack6))
-                    {
+                } else if (itemstack10.isEmpty()) {
+                    if (slot4.isItemValid(itemstack6)) {
                         int l1 = slot4.getItemStackLimit(itemstack6);
 
-                        if (itemstack6.getCount() > l1)
-                        {
+                        if (itemstack6.getCount() > l1) {
                             slot4.putStack(itemstack6.split(l1));
-                        }
-                        else
-                        {
+                        } else {
                             slot4.putStack(itemstack6);
                             inventoryplayer.setInventorySlotContents(dragType, ItemStack.EMPTY);
                         }
                     }
-                }
-                else if (slot4.canTakeStack(player) && slot4.isItemValid(itemstack6))
-                {
+                } else if (slot4.canTakeStack(player) && slot4.isItemValid(itemstack6)) {
                     int i2 = slot4.getItemStackLimit(itemstack6);
 
-                    if (itemstack6.getCount() > i2)
-                    {
+                    if (itemstack6.getCount() > i2) {
                         slot4.putStack(itemstack6.split(i2));
                         slot4.onTake(player, itemstack10);
 
-                        if (!inventoryplayer.addItemStackToInventory(itemstack10))
-                        {
+                        if (!inventoryplayer.addItemStackToInventory(itemstack10)) {
                             player.dropItem(itemstack10, true);
                         }
-                    }
-                    else
-                    {
+                    } else {
                         slot4.putStack(itemstack6);
                         inventoryplayer.setInventorySlotContents(dragType, itemstack10);
                         slot4.onTake(player, itemstack10);
                     }
                 }
             }
-        }
-        else if (clickTypeIn == ClickType.CLONE && player.abilities.isCreativeMode && inventoryplayer.getItemStack().isEmpty() && slotId >= 0)
-        {
+        } else if (clickTypeIn == ClickType.CLONE && player.abilities.isCreativeMode && inventoryplayer.getItemStack().isEmpty() && slotId >= 0) {
             Slot slot3 = this.inventorySlots.get(slotId);
 
-            if (slot3 != null && slot3.getHasStack())
-            {
+            if (slot3 != null && slot3.getHasStack()) {
                 ItemStack itemstack5 = slot3.getStack().copy();
                 itemstack5.setCount(itemstack5.getMaxStackSize());
                 inventoryplayer.setItemStack(itemstack5);
             }
-        }
-        else if (clickTypeIn == ClickType.THROW && inventoryplayer.getItemStack().isEmpty() && slotId >= 0)
-        {
+        } else if (clickTypeIn == ClickType.THROW && inventoryplayer.getItemStack().isEmpty() && slotId >= 0) {
             Slot slot2 = this.inventorySlots.get(slotId);
 
-            if (slot2 != null && slot2.getHasStack() && slot2.canTakeStack(player))
-            {
-                ItemStack itemstack4 = slot2.decrStackSize(dragType == 0 ? 1 : slot2.getStack().getCount());
-                slot2.onTake(player, itemstack4);
-                player.dropItem(itemstack4, true);
+            if (slot2 != null && slot2.getHasStack() && slot2.canTakeStack(player)) {
+                // Carpet ctrlQCraftingFix. ported carpetmod112's impl
+                if (CarpetSettings.ctrlQCraftingFix && slotId == 0 && dragType == 1) {
+                    Item craftedItem = slot2.getStack().getItem();
+
+                    while (slot2.getHasStack() && slot2.getStack().getItem() == craftedItem) {
+                        this.slotClick(slotId, 0, ClickType.THROW, player);
+                    }
+                    this.detectAndSendChanges();
+                }
+                // vanilla
+                else {
+                    ItemStack itemstack4 = slot2.decrStackSize(dragType == 0 ? 1 : slot2.getStack().getCount());
+                    slot2.onTake(player, itemstack4);
+                    player.dropItem(itemstack4, true);
+                }
             }
-        }
-        else if (clickTypeIn == ClickType.PICKUP_ALL && slotId >= 0)
-        {
+        } else if (clickTypeIn == ClickType.PICKUP_ALL && slotId >= 0) {
             Slot slot = this.inventorySlots.get(slotId);
             ItemStack itemstack1 = inventoryplayer.getItemStack();
 
-            if (!itemstack1.isEmpty() && (slot == null || !slot.getHasStack() || !slot.canTakeStack(player)))
-            {
+            if (!itemstack1.isEmpty() && (slot == null || !slot.getHasStack() || !slot.canTakeStack(player))) {
                 int i = dragType == 0 ? 0 : this.inventorySlots.size() - 1;
                 int j = dragType == 0 ? 1 : -1;
 
-                for (int k = 0; k < 2; ++k)
-                {
-                    for (int l = i; l >= 0 && l < this.inventorySlots.size() && itemstack1.getCount() < itemstack1.getMaxStackSize(); l += j)
-                    {
+                for (int k = 0; k < 2; ++k) {
+                    for (int l = i; l >= 0 && l < this.inventorySlots.size() && itemstack1.getCount() < itemstack1.getMaxStackSize(); l += j) {
                         Slot slot1 = this.inventorySlots.get(l);
 
-                        if (slot1.getHasStack() && canAddItemToSlot(slot1, itemstack1, true) && slot1.canTakeStack(player) && this.canMergeSlot(itemstack1, slot1))
-                        {
+                        if (slot1.getHasStack() && canAddItemToSlot(slot1, itemstack1, true) && slot1.canTakeStack(player) && this.canMergeSlot(itemstack1, slot1)) {
                             ItemStack itemstack2 = slot1.getStack();
 
-                            if (k != 0 || itemstack2.getCount() != itemstack2.getMaxStackSize())
-                            {
+                            if (k != 0 || itemstack2.getCount() != itemstack2.getMaxStackSize()) {
                                 int i1 = Math.min(itemstack1.getMaxStackSize() - itemstack1.getCount(), itemstack2.getCount());
                                 ItemStack itemstack3 = slot1.decrStackSize(i1);
                                 itemstack1.grow(i1);
 
-                                if (itemstack3.isEmpty())
-                                {
+                                if (itemstack3.isEmpty()) {
                                     slot1.putStack(ItemStack.EMPTY);
                                 }
 
@@ -472,137 +391,104 @@
         return itemstack;
     }
 
-    public static boolean areItemsAndTagsEqual(ItemStack stack1, ItemStack stack2)
-    {
+    public static boolean areItemsAndTagsEqual(ItemStack stack1, ItemStack stack2) {
         return stack1.getItem() == stack2.getItem() && ItemStack.areItemStackTagsEqual(stack1, stack2);
     }
 
-    public boolean canMergeSlot(ItemStack stack, Slot slotIn)
-    {
+    public boolean canMergeSlot(ItemStack stack, Slot slotIn) {
         return true;
     }
 
-    public void onContainerClosed(EntityPlayer playerIn)
-    {
+    public void onContainerClosed(EntityPlayer playerIn) {
         InventoryPlayer inventoryplayer = playerIn.inventory;
 
-        if (!inventoryplayer.getItemStack().isEmpty())
-        {
+        if (!inventoryplayer.getItemStack().isEmpty()) {
             playerIn.dropItem(inventoryplayer.getItemStack(), false);
             inventoryplayer.setItemStack(ItemStack.EMPTY);
         }
     }
 
-    protected void clearContainer(EntityPlayer playerIn, World worldIn, IInventory inventoryIn)
-    {
-        if (!playerIn.isAlive() || playerIn instanceof EntityPlayerMP && ((EntityPlayerMP)playerIn).hasDisconnected())
-        {
-            for (int j = 0; j < inventoryIn.getSizeInventory(); ++j)
-            {
+    protected void clearContainer(EntityPlayer playerIn, World worldIn, IInventory inventoryIn) {
+        if (!playerIn.isAlive() || playerIn instanceof EntityPlayerMP && ((EntityPlayerMP) playerIn).hasDisconnected()) {
+            for (int j = 0; j < inventoryIn.getSizeInventory(); ++j) {
                 playerIn.dropItem(inventoryIn.removeStackFromSlot(j), false);
             }
-        }
-        else
-        {
-            for (int i = 0; i < inventoryIn.getSizeInventory(); ++i)
-            {
+        } else {
+            for (int i = 0; i < inventoryIn.getSizeInventory(); ++i) {
                 playerIn.inventory.placeItemBackInInventory(worldIn, inventoryIn.removeStackFromSlot(i));
             }
         }
     }
 
-    public void onCraftMatrixChanged(IInventory inventoryIn)
-    {
+    public void onCraftMatrixChanged(IInventory inventoryIn) {
         this.detectAndSendChanges();
     }
 
-    public void putStackInSlot(int slotID, ItemStack stack)
-    {
+    public void putStackInSlot(int slotID, ItemStack stack) {
         this.getSlot(slotID).putStack(stack);
     }
 
     @OnlyIn(Dist.CLIENT)
-    public void setAll(List<ItemStack> p_190896_1_)
-    {
-        for (int i = 0; i < p_190896_1_.size(); ++i)
-        {
+    public void setAll(List<ItemStack> p_190896_1_) {
+        for (int i = 0; i < p_190896_1_.size(); ++i) {
             this.getSlot(i).putStack(p_190896_1_.get(i));
         }
     }
 
     @OnlyIn(Dist.CLIENT)
-    public void updateProgressBar(int id, int data)
-    {
+    public void updateProgressBar(int id, int data) {
     }
 
     @OnlyIn(Dist.CLIENT)
-    public short getNextTransactionID(InventoryPlayer invPlayer)
-    {
+    public short getNextTransactionID(InventoryPlayer invPlayer) {
         ++this.transactionID;
         return this.transactionID;
     }
 
-    public boolean getCanCraft(EntityPlayer player)
-    {
+    public boolean getCanCraft(EntityPlayer player) {
         return !this.playerList.contains(player);
     }
 
-    public void setCanCraft(EntityPlayer player, boolean canCraft)
-    {
-        if (canCraft)
-        {
+    public void setCanCraft(EntityPlayer player, boolean canCraft) {
+        if (canCraft) {
             this.playerList.remove(player);
-        }
-        else
-        {
+        } else {
             this.playerList.add(player);
         }
     }
 
     public abstract boolean canInteractWith(EntityPlayer playerIn);
 
-    protected boolean mergeItemStack(ItemStack stack, int startIndex, int endIndex, boolean reverseDirection)
-    {
+    protected boolean mergeItemStack(ItemStack stack, int startIndex, int endIndex, boolean reverseDirection) {
         boolean flag = false;
         int i = startIndex;
 
-        if (reverseDirection)
-        {
+        if (reverseDirection) {
             i = endIndex - 1;
         }
 
-        if (stack.isStackable())
-        {
-            while (!stack.isEmpty())
-            {
-                if (reverseDirection)
-                {
-                    if (i < startIndex)
-                    {
+        if (stack.isStackable()) {
+            while (!stack.isEmpty()) {
+                if (reverseDirection) {
+                    if (i < startIndex) {
                         break;
                     }
-                }
-                else if (i >= endIndex)
-                {
+                } else if (i >= endIndex) {
                     break;
                 }
 
                 Slot slot = this.inventorySlots.get(i);
                 ItemStack itemstack = slot.getStack();
 
-                if (!itemstack.isEmpty() && areItemsAndTagsEqual(stack, itemstack))
-                {
+                if (!itemstack.isEmpty() && areItemsAndTagsEqual(stack, itemstack)) {
                     int j = itemstack.getCount() + stack.getCount();
 
-                    if (j <= stack.getMaxStackSize())
-                    {
+                    if (j <= stack.getMaxStackSize()) {
                         stack.setCount(0);
                         itemstack.setCount(j);
                         slot.onSlotChanged();
                         flag = true;
-                    }
-                    else if (itemstack.getCount() < stack.getMaxStackSize())
-                    {
+                    } else if (itemstack.getCount() < stack.getMaxStackSize()) {
                         stack.shrink(stack.getMaxStackSize() - itemstack.getCount());
                         itemstack.setCount(stack.getMaxStackSize());
                         slot.onSlotChanged();
@@ -610,53 +496,37 @@
                     }
                 }
 
-                if (reverseDirection)
-                {
+                if (reverseDirection) {
                     --i;
-                }
-                else
-                {
+                } else {
                     ++i;
                 }
             }
         }
 
-        if (!stack.isEmpty())
-        {
-            if (reverseDirection)
-            {
+        if (!stack.isEmpty()) {
+            if (reverseDirection) {
                 i = endIndex - 1;
-            }
-            else
-            {
+            } else {
                 i = startIndex;
             }
 
-            while (true)
-            {
-                if (reverseDirection)
-                {
-                    if (i < startIndex)
-                    {
+            while (true) {
+                if (reverseDirection) {
+                    if (i < startIndex) {
                         break;
                     }
-                }
-                else if (i >= endIndex)
-                {
+                } else if (i >= endIndex) {
                     break;
                 }
 
                 Slot slot1 = this.inventorySlots.get(i);
                 ItemStack itemstack1 = slot1.getStack();
 
-                if (itemstack1.isEmpty() && slot1.isItemValid(stack))
-                {
-                    if (stack.getCount() > slot1.getSlotStackLimit())
-                    {
+                if (itemstack1.isEmpty() && slot1.isItemValid(stack)) {
+                    if (stack.getCount() > slot1.getSlotStackLimit()) {
                         slot1.putStack(stack.split(slot1.getSlotStackLimit()));
-                    }
-                    else
-                    {
+                    } else {
                         slot1.putStack(stack.split(stack.getCount()));
                     }
 
@@ -665,12 +535,9 @@
                     break;
                 }
 
-                if (reverseDirection)
-                {
+                if (reverseDirection) {
                     --i;
-                }
-                else
-                {
+                } else {
                     ++i;
                 }
             }
@@ -679,64 +546,48 @@
         return flag;
     }
 
-    public static int extractDragMode(int eventButton)
-    {
+    public static int extractDragMode(int eventButton) {
         return eventButton >> 2 & 3;
     }
 
-    public static int getDragEvent(int clickedButton)
-    {
+    public static int getDragEvent(int clickedButton) {
         return clickedButton & 3;
     }
 
     @OnlyIn(Dist.CLIENT)
-    public static int getQuickcraftMask(int p_94534_0_, int p_94534_1_)
-    {
+    public static int getQuickcraftMask(int p_94534_0_, int p_94534_1_) {
         return p_94534_0_ & 3 | (p_94534_1_ & 3) << 2;
     }
 
-    public static boolean isValidDragMode(int dragModeIn, EntityPlayer player)
-    {
-        if (dragModeIn == 0)
-        {
+    public static boolean isValidDragMode(int dragModeIn, EntityPlayer player) {
+        if (dragModeIn == 0) {
             return true;
-        }
-        else if (dragModeIn == 1)
-        {
+        } else if (dragModeIn == 1) {
             return true;
-        }
-        else
-        {
+        } else {
             return dragModeIn == 2 && player.abilities.isCreativeMode;
         }
     }
 
-    protected void resetDrag()
-    {
+    protected void resetDrag() {
         this.dragEvent = 0;
         this.dragSlots.clear();
     }
 
-    public static boolean canAddItemToSlot(@Nullable Slot slotIn, ItemStack stack, boolean stackSizeMatters)
-    {
+    public static boolean canAddItemToSlot(@Nullable Slot slotIn, ItemStack stack, boolean stackSizeMatters) {
         boolean flag = slotIn == null || !slotIn.getHasStack();
 
-        if (!flag && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack))
-        {
+        if (!flag && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack)) {
             return slotIn.getStack().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= stack.getMaxStackSize();
-        }
-        else
-        {
+        } else {
             return flag;
         }
     }
 
-    public static void computeStackSize(Set<Slot> dragSlotsIn, int dragModeIn, ItemStack stack, int slotStackSize)
-    {
-        switch (dragModeIn)
-        {
+    public static void computeStackSize(Set<Slot> dragSlotsIn, int dragModeIn, ItemStack stack, int slotStackSize) {
+        switch (dragModeIn) {
             case 0:
-                stack.setCount(MathHelper.floor((float)stack.getCount() / (float)dragSlotsIn.size()));
+                stack.setCount(MathHelper.floor((float) stack.getCount() / (float) dragSlotsIn.size()));
                 break;
             case 1:
                 stack.setCount(1);
@@ -748,53 +599,42 @@
         stack.grow(slotStackSize);
     }
 
-    public boolean canDragIntoSlot(Slot slotIn)
-    {
+    public boolean canDragIntoSlot(Slot slotIn) {
         return true;
     }
 
-    public static int calcRedstone(@Nullable TileEntity te)
-    {
-        return te instanceof IInventory ? calcRedstoneFromInventory((IInventory)te) : 0;
+    public static int calcRedstone(@Nullable TileEntity te) {
+        return te instanceof IInventory ? calcRedstoneFromInventory((IInventory) te) : 0;
     }
 
-    public static int calcRedstoneFromInventory(@Nullable IInventory inv)
-    {
-        if (inv == null)
-        {
+    public static int calcRedstoneFromInventory(@Nullable IInventory inv) {
+        if (inv == null) {
             return 0;
-        }
-        else
-        {
+        } else {
             int i = 0;
             float f = 0.0F;
 
-            for (int j = 0; j < inv.getSizeInventory(); ++j)
-            {
+            for (int j = 0; j < inv.getSizeInventory(); ++j) {
                 ItemStack itemstack = inv.getStackInSlot(j);
 
-                if (!itemstack.isEmpty())
-                {
-                    f += (float)itemstack.getCount() / (float)Math.min(inv.getInventoryStackLimit(), itemstack.getMaxStackSize());
+                if (!itemstack.isEmpty()) {
+                    f += (float) itemstack.getCount() / (float) Math.min(inv.getInventoryStackLimit(), itemstack.getMaxStackSize());
                     ++i;
                 }
             }
 
-            f = f / (float)inv.getSizeInventory();
+            f = f / (float) inv.getSizeInventory();
             return MathHelper.floor(f * 14.0F) + (i > 0 ? 1 : 0);
         }
     }
 
-    protected void slotChangedCraftingGrid(World worldIn, EntityPlayer playerIn, IInventory craftMatrixIn, InventoryCraftResult craftResultIn)
-    {
-        if (!worldIn.isRemote)
-        {
-            EntityPlayerMP entityplayermp = (EntityPlayerMP)playerIn;
+    protected void slotChangedCraftingGrid(World worldIn, EntityPlayer playerIn, IInventory craftMatrixIn, InventoryCraftResult craftResultIn) {
+        if (!worldIn.isRemote) {
+            EntityPlayerMP entityplayermp = (EntityPlayerMP) playerIn;
             ItemStack itemstack = ItemStack.EMPTY;
             IRecipe irecipe = worldIn.getServer().getRecipeManager().getRecipe(craftMatrixIn, worldIn);
 
-            if (craftResultIn.canUseRecipe(worldIn, entityplayermp, irecipe) && irecipe != null)
-            {
+            if (craftResultIn.canUseRecipe(worldIn, entityplayermp, irecipe) && irecipe != null) {
                 itemstack = irecipe.getCraftingResult(craftMatrixIn);
             }
 
