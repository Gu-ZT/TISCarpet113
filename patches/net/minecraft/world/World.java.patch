--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -1,5 +1,13 @@
 package net.minecraft.world;
 
+import carpet.helpers.TickSpeed;
+import carpet.microtick.MicroTickLoggerManager;
+import carpet.logging.logHelpers.TileEntityListLogHelper;
+import carpet.microtick.enums.ActionRelation;
+import carpet.microtick.enums.BlockUpdateType;
+import carpet.settings.CarpetSettings;
+import carpet.utils.CarpetProfiler;
+import carpet.utils.LightingEngine;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -116,6 +124,13 @@
     private final WorldBorder worldBorder;
     int[] lightUpdateBlockList = new int['\u8000'];
 
+    private LightingEngine lightingEngine; // [TISCM] Newlight
+    
+    public LightingEngine getLightingEngine()
+    {
+        return lightingEngine;
+    }
+    
     protected World(ISaveHandler p_i49813_1_, @Nullable WorldSavedDataStorage p_i49813_2_, WorldInfo p_i49813_3_, Dimension p_i49813_4_, Profiler p_i49813_5_, boolean p_i49813_6_)
     {
         this.saveHandler = p_i49813_1_;
@@ -125,6 +140,8 @@
         this.dimension = p_i49813_4_;
         this.isRemote = p_i49813_6_;
         this.worldBorder = p_i49813_4_.createWorldBorder();
+        
+        this.lightingEngine = new LightingEngine(this); // [TISCM] Newlight
     }
 
     public Biome getBiome(BlockPos pos)
@@ -238,7 +255,7 @@
         {
             Chunk chunk = this.getChunk(pos);
             Block block = newState.getBlock();
-            IBlockState iblockstate = chunk.setBlockState(pos, newState, (flags & 64) != 0);
+            IBlockState iblockstate = chunk.setBlockState(pos, newState, (flags & 64) != 0, (flags & 1024) != 0);
 
             if (iblockstate == null)
             {
@@ -262,6 +279,13 @@
                         this.markBlockRangeForRenderUpdate(pos, pos);
                     }
 
+
+                    if (carpet.settings.CarpetSettings.totallyNoBlockUpdate)
+                    {
+                    	return true;
+                    }
+                    
+                    
                     if ((flags & 2) != 0 && (!this.isRemote || (flags & 4) == 0) && chunk.isPopulated())
                     {
                         this.notifyBlockUpdate(pos, iblockstate, newState, flags);
@@ -277,7 +301,9 @@
                         }
                     }
 
-                    if ((flags & 16) == 0)
+                    //fillUpdates added case
+                    // if ((flags & 16) == 0)
+                    if (((flags & 16) == 0) && ((flags & 1024) == 0))
                     {
                         int i = flags & -2;
                         iblockstate.updateDiagonalNeighbors(this, pos, i);
@@ -372,19 +398,27 @@
             this.eventListeners.get(i).markBlockRangeForRenderUpdate(x1, y1, z1, x2, y2, z2);
         }
     }
-
     public void notifyNeighborsOfStateChange(BlockPos pos, Block blockIn)
     {
+        // TISCM Micro Tick logger
+        MicroTickLoggerManager.onBlockUpdate(this, pos, blockIn, ActionRelation.PRE_ACTION, BlockUpdateType.NEIGHBOR_CHANGED);
+
         this.neighborChanged(pos.west(), blockIn, pos);
         this.neighborChanged(pos.east(), blockIn, pos);
         this.neighborChanged(pos.down(), blockIn, pos);
         this.neighborChanged(pos.up(), blockIn, pos);
         this.neighborChanged(pos.north(), blockIn, pos);
         this.neighborChanged(pos.south(), blockIn, pos);
+
+        // TISCM Micro Tick logger
+        MicroTickLoggerManager.onBlockUpdate(this, pos, blockIn, ActionRelation.POST_ACTION, BlockUpdateType.NEIGHBOR_CHANGED);
     }
 
     public void notifyNeighborsOfStateExcept(BlockPos pos, Block blockType, EnumFacing skipSide)
     {
+        // TISCM Micro Tick logger
+        MicroTickLoggerManager.onBlockUpdate(this, pos, blockType, ActionRelation.PRE_ACTION, BlockUpdateType.NEIGHBOR_CHANGED_EXCEPT, skipSide);
+
         if (skipSide != EnumFacing.WEST)
         {
             this.neighborChanged(pos.west(), blockType, pos);
@@ -414,10 +448,16 @@
         {
             this.neighborChanged(pos.south(), blockType, pos);
         }
-    }
 
+        // TISCM Micro Tick logger
+        MicroTickLoggerManager.onBlockUpdate(this, pos, blockType, ActionRelation.POST_ACTION, BlockUpdateType.NEIGHBOR_CHANGED_EXCEPT, skipSide);
+    }
     public void neighborChanged(BlockPos pos, Block blockIn, BlockPos fromPos)
     {
+    	if (CarpetSettings.totallyNoBlockUpdate)
+    	{
+    		return;
+    	}
         if (!this.isRemote)
         {
             IBlockState iblockstate = this.getBlockState(pos);
@@ -1199,6 +1239,13 @@
     {
         this.profiler.startSection("entities");
         this.profiler.startSection("global");
+        /// CM profiler
+        int did = this.dimension.getType().getId();
+        String world_name = (did==0)?"Overworld":((did<0?"The Nether":"The End"));
+        CarpetProfiler.ProfilerToken tok_entities = CarpetProfiler.start_section_concurrent(world_name, "Entities", this.isRemote);
+        MicroTickLoggerManager.setTickStage(this, "Entities"); // TISCM Micro Tick logger
+        MicroTickLoggerManager.setTickStageExtra(this, "Ticking weather effects"); // TISCM Micro Tick logger
+        // end
 
         for (int i = 0; i < this.weatherEffects.size(); ++i)
         {
@@ -1234,6 +1281,7 @@
 
         this.profiler.endStartSection("remove");
         this.loadedEntityList.removeAll(this.unloadedEntityList);
+        MicroTickLoggerManager.setTickStageExtra(this, "Removing entities"); // TISCM Micro Tick logger
 
         for (int k = 0; k < this.unloadedEntityList.size(); ++k)
         {
@@ -1253,12 +1301,15 @@
         }
 
         this.unloadedEntityList.clear();
+        MicroTickLoggerManager.setTickStageExtra(this, "Ticking players"); // TISCM Micro Tick logger
         this.tickPlayers();
         this.profiler.endStartSection("regular");
+        MicroTickLoggerManager.setTickStageExtra(this, "Ticking regular entities"); // TISCM Micro Tick logger
 
         for (int i1 = 0; i1 < this.loadedEntityList.size(); ++i1)
         {
             Entity entity2 = this.loadedEntityList.get(i1);
+            CarpetProfiler.ProfilerToken tok = CarpetProfiler.start_entity_section(world_name, entity2);
             Entity entity3 = entity2.getRidingEntity();
 
             if (entity3 != null)
@@ -1273,7 +1324,8 @@
 
             this.profiler.startSection("tick");
 
-            if (!entity2.removed && !(entity2 instanceof EntityPlayerMP))
+            // [CM] Tick Freeze
+            if (!entity2.removed && !(entity2 instanceof EntityPlayerMP) && (TickSpeed.process_entities || entity2 instanceof EntityPlayer))
             {
                 try
                 {
@@ -1304,14 +1356,26 @@
                 this.loadedEntityList.remove(i1--);
                 this.onEntityRemoved(entity2);
             }
+            CarpetProfiler.end_current_entity_section(tok);
 
             this.profiler.endSection();
         }
+        CarpetProfiler.end_current_section_concurrent(tok_entities);
+        tok_entities = CarpetProfiler.start_section_concurrent(world_name, "Tile Entities", this.isRemote);
 
+
         this.profiler.endStartSection("blockEntities");
+        MicroTickLoggerManager.setTickStageExtra(this, null); // TISCM Micro Tick logger
+        MicroTickLoggerManager.setTickStage(this, "TileEntities"); // TISCM Micro Tick logger
 
         if (!this.tileEntitiesToBeRemoved.isEmpty())
         {
+            // TISCM TileEntityListLogger
+            for (TileEntity te : tileEntitiesToBeRemoved)
+            {
+                TileEntityListLogHelper.log(this, this.getDimension().getType().getId(), "ToBeRemoved", te);
+            }
+            // end TISCM TileEntityListLogger
             this.tickableTileEntities.removeAll(this.tileEntitiesToBeRemoved);
             this.loadedTileEntityList.removeAll(this.tileEntitiesToBeRemoved);
             this.tileEntitiesToBeRemoved.clear();
@@ -1319,16 +1383,19 @@
 
         this.processingLoadedTiles = true;
         Iterator<TileEntity> iterator = this.tickableTileEntities.iterator();
-
+        int counter = 0; // TISCM TileEntityListLogger
         while (iterator.hasNext())
         {
             TileEntity tileentity = iterator.next();
+            CarpetProfiler.ProfilerToken tok = CarpetProfiler.start_tileentity_section(world_name, tileentity);
 
+
             if (!tileentity.isRemoved() && tileentity.hasWorld())
             {
                 BlockPos blockpos = tileentity.getPos();
 
-                if (this.isBlockLoaded(blockpos) && this.worldBorder.contains(blockpos))
+                // [CM extra check to process entities]
+                if (this.isBlockLoaded(blockpos) && this.worldBorder.contains(blockpos) && TickSpeed.process_entities)
                 {
                     try
                     {
@@ -1336,6 +1403,8 @@
                         {
                             return String.valueOf((Object)TileEntityType.getId(tileentity.getType()));
                         });
+                        MicroTickLoggerManager.setTickStageExtra(this, String.format("Order: %d\nPosition: [%d, %d, %d]",
+                                counter++, tileentity.getPos().getX(), tileentity.getPos().getY(), tileentity.getPos().getZ()));
                         ((ITickable)tileentity).tick();
                         this.profiler.endSection();
                     }
@@ -1359,10 +1428,12 @@
                     this.getChunk(tileentity.getPos()).removeTileEntity(tileentity.getPos());
                 }
             }
+            CarpetProfiler.end_current_entity_section(tok);
         }
 
         this.processingLoadedTiles = false;
         this.profiler.endStartSection("pendingBlockEntities");
+        MicroTickLoggerManager.setTickStageExtra(this, "Adding pending block entities"); // TISCM Micro Tick logger
 
         if (!this.addedTileEntityList.isEmpty())
         {
@@ -1389,9 +1460,13 @@
 
             this.addedTileEntityList.clear();
         }
+        CarpetProfiler.end_current_section_concurrent(tok_entities);
 
         this.profiler.endSection();
         this.profiler.endSection();
+
+        TileEntityListLogHelper.flush(); // TISCM TileEntityListLogger
+        MicroTickLoggerManager.setTickStageExtra(this, null); // TISCM Micro Tick logger
     }
 
     protected void tickPlayers()
@@ -1414,6 +1489,10 @@
             this.notifyBlockUpdate(blockpos, iblockstate, iblockstate, 2);
         }
 
+        // TISCM TileEntityListLogger
+        TileEntityListLogHelper.log(this, this.getDimension().getType().getId(), "Added", tile);
+        // end TISCM TileEntityListLogger
+        
         return flag;
     }
 
@@ -1422,6 +1501,12 @@
         if (this.processingLoadedTiles)
         {
             this.addedTileEntityList.addAll(tileEntityCollection);
+            // TISCM TileEntityListLogger
+            for (TileEntity te : tileEntityCollection)
+            {
+                TileEntityListLogHelper.log(this, this.getDimension().getType().getId(), "Pending", te);
+            }
+            // end TISCM TileEntityListLogger
         }
         else
         {
@@ -1514,7 +1599,8 @@
                 this.getChunk(entityIn.chunkCoordX, entityIn.chunkCoordZ).removeEntityAtIndex(entityIn, entityIn.chunkCoordY);
             }
 
-            if (!entityIn.setPositionNonDirty() && !this.isChunkLoaded(l, j1, true))
+            // [CM] Faster entities can move into unloaded chunks and can get stuck in memory lagging the server. This fixes it
+            if (!CarpetSettings.unloadedEntityFix && !entityIn.setPositionNonDirty() && !this.isChunkLoaded(l, j1, true))
             {
                 entityIn.addedToChunk = false;
             }
@@ -1883,6 +1969,10 @@
     public void removeTileEntity(BlockPos pos)
     {
         TileEntity tileentity = this.getTileEntity(pos);
+        
+        // TISCM TileEntityListLogger
+         TileEntityListLogHelper.log(this, this.getDimension().getType().getId(), "Removed", pos);
+        // end TISCM TileEntityListLogger
 
         if (tileentity != null && this.processingLoadedTiles)
         {
@@ -2149,6 +2239,13 @@
 
     public boolean checkLightFor(EnumLightType lightType, BlockPos pos)
     {
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+        {
+            this.getLightingEngine().scheduleLightUpdate(lightType, pos);
+            return true;
+        }
+        
         if (!this.isAreaLoaded(pos, 17, false))
         {
             return false;
@@ -3204,4 +3301,17 @@
     public abstract RecipeManager getRecipeManager();
 
     public abstract NetworkTagManager getTags();
+    
+    // [CM] added override for createShapecaster
+    @Override
+    public ocd.mcoptimizations.shapecast.IShapecaster createShapecaster(@Nullable final Entity entity, final Set<Entity> ignoredEntities, final AxisAlignedBB box, @Nullable final Predicate<VoxelShape> filter)
+    {
+        final ocd.mcoptimizations.shapecast.IShapecaster shapecaster = IWorld.super.createShapecaster(entity, ignoredEntities, box, filter);
+        
+        if (entity == null)
+            return shapecaster;
+        
+        return ocd.mcoptimizations.shapecast.IShapecaster.combine(IEntityReader.super.createShapecaster(entity, ignoredEntities, box, filter), shapecaster);
+    }
+    // [CM] end
 }
