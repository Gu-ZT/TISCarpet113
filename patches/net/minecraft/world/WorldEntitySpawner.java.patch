--- a/net/minecraft/world/WorldEntitySpawner.java
+++ b/net/minecraft/world/WorldEntitySpawner.java
@@ -1,17 +1,16 @@
 package net.minecraft.world;
 
+import carpet.commands.lifetime.spawning.LiteralSpawningReason;
+import carpet.settings.CarpetSettings;
+import carpet.utils.SpawnReporter;
+import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
+
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.entity.EntityLiving;
-import net.minecraft.entity.EntitySpawnPlacementRegistry;
-import net.minecraft.entity.EntityType;
-import net.minecraft.entity.EnumCreatureType;
-import net.minecraft.entity.IEntityLivingData;
+import net.minecraft.entity.*;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.fluid.IFluidState;
 import net.minecraft.init.Blocks;
@@ -20,10 +19,12 @@
 import net.minecraft.server.management.PlayerChunkMapEntry;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.util.Tuple;
 import net.minecraft.util.WeightedRandom;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.registry.IRegistry;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.gen.Heightmap;
@@ -38,6 +39,8 @@
 
     public int findChunksForSpawning(WorldServer worldServerIn, boolean spawnHostileMobs, boolean spawnPeacefulMobs, boolean spawnOnSetTickRate)
     {
+        worldServerIn.getLifeTimeWorldTracker().increaseSpawnStageCounter();  // TISCM lifetime tracker
+
         if (!spawnHostileMobs && !spawnPeacefulMobs)
         {
             return 0;
@@ -84,16 +87,49 @@
             int k4 = 0;
             BlockPos blockpos1 = worldServerIn.getSpawnPoint();
 
+            //CM start
+            int did = worldServerIn.dimension.getType().getId();
+            String level_suffix = (did==0)?"":((did<0?" (N)":" (E)"));
+            // CM lagFreeSpawning
+            Map<EntityType<?>, EntityLiving> precookedMobs = Maps.newHashMap();
+            //CM end
+
             for (EnumCreatureType enumcreaturetype : EnumCreatureType.values())
             {
+                //CM start
+                String type_code = enumcreaturetype.toString();
+                String group_code = type_code+level_suffix;
+                if (SpawnReporter.track_spawns > 0L)
+                {
+                    SpawnReporter.overall_spawn_ticks.put(group_code, SpawnReporter.overall_spawn_ticks.get(group_code) + SpawnReporter.spawn_tries.get(type_code));
+                }
+                //CM end
                 if ((!enumcreaturetype.getPeacefulCreature() || spawnPeacefulMobs) && (enumcreaturetype.getPeacefulCreature() || spawnHostileMobs) && (!enumcreaturetype.getAnimal() || spawnOnSetTickRate))
                 {
-                    int l4 = enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV;
-                    int i5 = worldServerIn.countEntities(enumcreaturetype.getBaseClass(), l4);
+                    //CM replaced: //int l4 = enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV;
+                    int l4 = (int)(Math.pow(2.0,(SpawnReporter.mobcap_exponent/4)) * enumcreaturetype.getMaxNumberOfCreature() * i / MOB_COUNT_DIV);
 
+                    int i5 = worldServerIn.countEntities(enumcreaturetype.getBaseClass(), 100000); // CM replaced l4 with 100000 TODO consider calling it now specifically because of the limits
+
+                    SpawnReporter.mobcaps.get(did).put(enumcreaturetype, new Tuple<>(i5, l4));
+                    int tries = SpawnReporter.spawn_tries.get(type_code);
+                    if (SpawnReporter.track_spawns > 0L)
+                    {
+                        SpawnReporter.spawn_attempts.put(group_code, SpawnReporter.spawn_attempts.get(group_code) + tries);
+                        SpawnReporter.spawn_cap_count.put(group_code, SpawnReporter.spawn_cap_count.get(group_code) + i5);
+                    }
+                    if (SpawnReporter.mock_spawns) { i5 = 0; } // no mobcaps
+                    //CM end
+
                     if (i5 <= l4)
                     {
                         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+                      /* carpet mod -> extra indentation */
+                      for (int trie = 0; trie < tries; trie++)
+                      {
+                        long local_spawns = 0;
+                        /* end */
+
                         label158:
 
                         for (ChunkPos chunkpos1 : this.eligibleChunksForSpawning)
@@ -157,7 +193,16 @@
 
                                                         try
                                                         {
-                                                            entityliving = biome$spawnlistentry.entityType.create(worldServerIn);
+                                                            // CM lagFreeSpawning
+                                                            if (CarpetSettings.lagFreeSpawning)
+                                                            {
+                                                                entityliving = precookedMobs.computeIfAbsent(biome$spawnlistentry.entityType, entityType -> (EntityLiving)entityType.create(worldServerIn));
+                                                            }
+                                                            else
+                                                            {
+                                                                // vanilla
+                                                                entityliving = biome$spawnlistentry.entityType.create(worldServerIn);
+                                                            }
                                                         }
                                                         catch (Exception exception)
                                                         {
@@ -169,13 +214,36 @@
 
                                                         if ((d0 <= 16384.0D || !entityliving.canDespawn()) && entityliving.canSpawn(worldServerIn, false) && entityliving.isNotColliding(worldServerIn))
                                                         {
+                                                            // CM lagFreeSpawning
+                                                            if (CarpetSettings.lagFreeSpawning)
+                                                            {
+                                                                precookedMobs.remove(biome$spawnlistentry.entityType);
+                                                            }
+
                                                             ientitylivingdata = entityliving.onInitialSpawn(worldServerIn.getDifficultyForLocation(new BlockPos(entityliving)), ientitylivingdata, (NBTTagCompound)null);
 
                                                             if (entityliving.isNotColliding(worldServerIn))
                                                             {
                                                                 ++j2;
                                                                 ++i4;
-                                                                worldServerIn.spawnEntity(entityliving);
+                                                                //CM replacing //worldServerIn.spawnEntity(entityliving)
+                                                                ++local_spawns;
+                                                                if (SpawnReporter.track_spawns > 0L)
+                                                                {
+                                                                    String species = IRegistry.ENTITY_TYPE.getKey(entityliving.getType()).toString().replaceFirst("minecraft:","");
+                                                                    SpawnReporter.registerSpawn(entityliving, type_code, species, blockpos$mutableblockpos);
+                                                                }
+                                                                if (SpawnReporter.mock_spawns)
+                                                                {
+                                                                    entityliving.remove();
+                                                                }
+                                                                else
+                                                                {
+                                                                    // TISCM lifetime tracker
+                                                                    entityliving.recordSpawning(LiteralSpawningReason.NATURAL);
+
+                                                                    worldServerIn.spawnEntity(entityliving);
+                                                                }
                                                             }
                                                             else
                                                             {
@@ -202,7 +270,30 @@
                                 }
                             }
                         }
+                        /* carpet mod */
+
+                        if (SpawnReporter.track_spawns > 0L)
+                        {
+                            if (local_spawns > 0)
+                            {
+                                SpawnReporter.spawn_ticks_succ.put(group_code, SpawnReporter.spawn_ticks_succ.get(group_code) + 1L);
+                                SpawnReporter.spawn_ticks_spawns.put(group_code, SpawnReporter.spawn_ticks_spawns.get(group_code) + local_spawns);
+                            }
+                            else
+                            {
+                                SpawnReporter.spawn_ticks_fail.put(group_code, SpawnReporter.spawn_ticks_fail.get(group_code) + 1L);
+                            }
+                        }
+                      } //carpet mod <- extra indentation
                     }
+                    else //carpet mod full mobcap
+                    {
+                        if (SpawnReporter.track_spawns > 0L)
+                        {
+                            SpawnReporter.spawn_ticks_full.put(group_code, SpawnReporter.spawn_ticks_full.get(group_code) + SpawnReporter.spawn_tries.get(type_code));
+                        }
+                    }
+                    /* end */
                 }
             }
 
@@ -244,12 +335,20 @@
     {
         if (entityTypeIn != null && worldIn.getWorldBorder().contains(pos))
         {
-            IBlockState iblockstate = worldIn.getBlockState(pos);
-            IFluidState ifluidstate = worldIn.getFluidState(pos);
+//            IBlockState iblockstate = worldIn.getBlockState(pos);
+//            IFluidState ifluidstate = worldIn.getFluidState(pos);
+            // CM lagFreeSpawning
+            // lazy querying
+            IBlockState iblockstate = CarpetSettings.lagFreeSpawning ? null : worldIn.getBlockState(pos);
+            IFluidState ifluidstate = CarpetSettings.lagFreeSpawning ? null : worldIn.getFluidState(pos);
 
             switch (placeType)
             {
                 case IN_WATER:
+                    if (ifluidstate == null)
+                    {
+                        ifluidstate = worldIn.getFluidState(pos);
+                    }
                     return ifluidstate.isTagged(FluidTags.WATER) && worldIn.getFluidState(pos.down()).isTagged(FluidTags.WATER) && !worldIn.getBlockState(pos.up()).isNormalCube();
                 case ON_GROUND:
                 default:
@@ -259,7 +358,21 @@
                     {
                         Block block = iblockstate1.getBlock();
                         boolean flag = block != Blocks.BEDROCK && block != Blocks.BARRIER;
-                        return flag && isValidEmptySpawnBlock(iblockstate, ifluidstate) && isValidEmptySpawnBlock(worldIn.getBlockState(pos.up()), worldIn.getFluidState(pos.up()));
+                        // CM lagFreeSpawning
+//                        return flag && isValidEmptySpawnBlock(iblockstate, ifluidstate) && isValidEmptySpawnBlock(worldIn.getBlockState(pos.up()), worldIn.getFluidState(pos.up()));
+
+                        if (!flag)
+                        {
+                            return false;
+                        }
+                        if (iblockstate == null || ifluidstate == null)
+                        {
+                            ifluidstate = worldIn.getFluidState(pos);
+                            iblockstate = worldIn.getBlockState(pos);
+                        }
+                        return isValidEmptySpawnBlock(iblockstate, ifluidstate) && isValidEmptySpawnBlock(worldIn.getBlockState(pos.up()), worldIn.getFluidState(pos.up()));
+
+                        // CM lagFreeSpawning ends
                     }
                     else
                     {
