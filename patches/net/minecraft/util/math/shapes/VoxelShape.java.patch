--- a/net/minecraft/util/math/shapes/VoxelShape.java
+++ b/net/minecraft/util/math/shapes/VoxelShape.java
@@ -1,10 +1,13 @@
 package net.minecraft.util.math.shapes;
 
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Lists;
 import com.google.common.math.DoubleMath;
 import it.unimi.dsi.fastutil.doubles.DoubleList;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import me.jellysquid.mods.lithium.LithiumConfig;
 import net.minecraft.util.AxisRotation;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.AxisAlignedBB;
@@ -17,9 +20,15 @@
 
 public abstract class VoxelShape
 {
-    protected final VoxelShapePart part;
+    // lithium shapes.optimized_matching make public
+    public final VoxelShapePart part;
 
-    VoxelShape(VoxelShapePart part)
+    // Lithium shapes.specialized_shapes
+    private static final double POSITIVE_EPSILON = +1.0E-7D;
+    private static final double NEGATIVE_EPSILON = -1.0E-7D;
+    
+    // [CM] Made public so VoxelShapeAABB can derive from it
+    public VoxelShape(VoxelShapePart part)
     {
         this.part = part;
     }
@@ -55,15 +64,28 @@
 
     protected abstract DoubleList getValues(EnumFacing.Axis axis);
 
+    // lithium shapes.optimized_matching added invoker
+    public DoubleList invokeGetValues(EnumFacing.Axis axis)
+    {
+        return this.getValues(axis);
+    }
+
     public boolean isEmpty()
     {
         return this.part.isEmpty();
     }
-
+    
+    // [CM] start
     public VoxelShape withOffset(double xOffset, double yOffset, double zOffset)
     {
+        return this.offset(xOffset, yOffset, zOffset).persistent();
+    }
+    
+    public VoxelShape offset(double xOffset, double yOffset, double zOffset)
+    {
         return (VoxelShape)(this.isEmpty() ? VoxelShapes.empty() : new VoxelShapeArray(this.part, (DoubleList)(new OffsetDoubleList(this.getValues(EnumFacing.Axis.X), xOffset)), (DoubleList)(new OffsetDoubleList(this.getValues(EnumFacing.Axis.Y), yOffset)), (DoubleList)(new OffsetDoubleList(this.getValues(EnumFacing.Axis.Z), zOffset))));
     }
+    // [CM] end
 
     public VoxelShape simplify()
     {
@@ -199,11 +221,19 @@
 
     public double func_212430_a(EnumFacing.Axis p_212430_1_, AxisAlignedBB p_212430_2_, double p_212430_3_)
     {
-        return this.func_212431_a(AxisRotation.from(p_212430_1_, EnumFacing.Axis.X), p_212430_2_, p_212430_3_);
+        return !CarpetSettings.optimizeVoxelCode ?
+                this.func_212431_a(AxisRotation.from(p_212430_1_, EnumFacing.Axis.X), p_212430_2_, p_212430_3_) :
+                this.func_212431_a_new(AxisRotation.from(p_212430_1_, EnumFacing.Axis.X), p_212430_2_, p_212430_3_);
     }
 
     protected double func_212431_a(AxisRotation p_212431_1_, AxisAlignedBB p_212431_2_, double p_212431_3_)
     {
+        // Lithium shapes.specialized_shapes
+        if (LithiumConfig.SHAPES_SPECIALIZED_SHAPES)
+        {
+            return func_212431_a$lithium(p_212431_1_, p_212431_2_, p_212431_3_);
+        }
+
         if (this.isEmpty())
         {
             return p_212431_3_;
@@ -279,8 +309,240 @@
         }
     }
 
+    // Lithium shapes.specialized_shapes
+    /**
+     * @reason Use optimized implementation which delays searching for coordinates as long as possible
+     * @author JellySquid
+     */
+    public double func_212431_a$lithium(AxisRotation cycleDirection, AxisAlignedBB box, double maxDist) {
+        if (this.isEmpty()) {
+            return maxDist;
+        }
+
+        if (Math.abs(maxDist) < POSITIVE_EPSILON) {
+            return 0.0D;
+        }
+
+        AxisRotation cycle = cycleDirection.reverse();
+
+        EnumFacing.Axis axisX = cycle.rotate(EnumFacing.Axis.X);
+        EnumFacing.Axis axisY = cycle.rotate(EnumFacing.Axis.Y);
+        EnumFacing.Axis axisZ = cycle.rotate(EnumFacing.Axis.Z);
+
+        int minY = Integer.MIN_VALUE;
+        int maxY = Integer.MIN_VALUE;
+        int minZ = Integer.MIN_VALUE;
+        int maxZ = Integer.MIN_VALUE;
+
+        int x, y, z;
+
+        double dist;
+
+        if (maxDist > 0.0D) {
+            double max = box.getMax(axisX);
+            int maxIdx = this.getClosestIndex(axisX, max - POSITIVE_EPSILON);
+
+            int maxX = this.part.getSize(axisX);
+
+            for (x = maxIdx + 1; x < maxX; ++x) {
+                minY = minY == Integer.MIN_VALUE ? Math.max(0, this.getClosestIndex(axisY, box.getMin(axisY) + POSITIVE_EPSILON)) : minY;
+                maxY = maxY == Integer.MIN_VALUE ? Math.min(this.part.getSize(axisY), this.getClosestIndex(axisY, box.getMax(axisY) - POSITIVE_EPSILON) + 1) : maxY;
+
+                for (y = minY; y < maxY; ++y) {
+                    minZ = minZ == Integer.MIN_VALUE ? Math.max(0, this.getClosestIndex(axisZ, box.getMin(axisZ) + POSITIVE_EPSILON)) : minZ;
+                    maxZ = maxZ == Integer.MIN_VALUE ? Math.min(this.part.getSize(axisZ), this.getClosestIndex(axisZ, box.getMax(axisZ) - POSITIVE_EPSILON) + 1) : maxZ;
+
+                    for (z = minZ; z < maxZ; ++z) {
+                        if (this.part.containsWithRotation(cycle, x, y, z)) {
+                            dist = this.getValueUnchecked(axisX, x) - max;
+
+                            if (dist >= NEGATIVE_EPSILON) {
+                                maxDist = Math.min(maxDist, dist);
+                            }
+
+                            return maxDist;
+                        }
+                    }
+                }
+            }
+        } else if (maxDist < 0.0D) {
+            double min = box.getMin(axisX);
+            int minIdx = this.getClosestIndex(axisX, min + POSITIVE_EPSILON);
+
+            for (x = minIdx - 1; x >= 0; --x) {
+                minY = minY == Integer.MIN_VALUE ? Math.max(0, this.getClosestIndex(axisY, box.getMin(axisY) + POSITIVE_EPSILON)) : minY;
+                maxY = maxY == Integer.MIN_VALUE ? Math.min(this.part.getSize(axisY), this.getClosestIndex(axisY, box.getMax(axisY) - POSITIVE_EPSILON) + 1) : maxY;
+
+                for (y = minY; y < maxY; ++y) {
+                    minZ = minZ == Integer.MIN_VALUE ? Math.max(0, this.getClosestIndex(axisZ, box.getMin(axisZ) + POSITIVE_EPSILON)) : minZ;
+                    maxZ = maxZ == Integer.MIN_VALUE ? Math.min(this.part.getSize(axisZ), this.getClosestIndex(axisZ, box.getMax(axisZ) - POSITIVE_EPSILON) + 1) : maxZ;
+
+                    for (z = minZ; z < maxZ; ++z) {
+                        if (this.part.containsWithRotation(cycle, x, y, z)) {
+                            dist = this.getValueUnchecked(axisX, x + 1) - min;
+
+                            if (dist <= POSITIVE_EPSILON) {
+                                maxDist = Math.max(maxDist, dist);
+                            }
+
+                            return maxDist;
+                        }
+                    }
+                }
+            }
+        }
+
+        return maxDist;
+    }
+    
+    protected double func_212431_a_new(AxisRotation p_212431_1_, AxisAlignedBB p_212431_2_, double p_212431_3_)
+    {
+        if (this.isEmpty())
+        {
+            return p_212431_3_;
+        }
+        else if (Math.abs(p_212431_3_) < 1.0E-7D)
+        {
+            return 0.0D;
+        }
+        else
+        {
+            AxisRotation axisrotation = p_212431_1_.reverse();
+            EnumFacing.Axis enumfacing$axis = axisrotation.rotate(EnumFacing.Axis.X);
+            EnumFacing.Axis enumfacing$axis1 = axisrotation.rotate(EnumFacing.Axis.Y);
+            EnumFacing.Axis enumfacing$axis2 = axisrotation.rotate(EnumFacing.Axis.Z);
+            int k = Math.max(0, this.getClosestIndex(enumfacing$axis1, p_212431_2_.getMin(enumfacing$axis1) + 1.0E-7D));
+            int l = Math.min(this.part.getSize(enumfacing$axis1), this.getClosestIndex(enumfacing$axis1, p_212431_2_.getMax(enumfacing$axis1) - 1.0E-7D) + 1);
+            int i1 = Math.max(0, this.getClosestIndex(enumfacing$axis2, p_212431_2_.getMin(enumfacing$axis2) + 1.0E-7D));
+            int j1 = Math.min(this.part.getSize(enumfacing$axis2), this.getClosestIndex(enumfacing$axis2, p_212431_2_.getMax(enumfacing$axis2) - 1.0E-7D) + 1);
+            int k1 = this.part.getSize(enumfacing$axis);
+            
+            if (p_212431_3_ > 0.0D)
+            {
+                double d0 = p_212431_2_.getMax(enumfacing$axis);
+                int j = this.getClosestIndex(enumfacing$axis, d0 - 1.0E-7D);
+                
+                for (int l1 = j + 1; l1 < k1; ++l1)
+                {
+                    double d2 = this.getValueUnchecked(enumfacing$axis, l1) - d0;
+                    if (d2 > p_212431_3_)
+                        return p_212431_3_;
+                    
+                    for (int i2 = k; i2 < l; ++i2)
+                    {
+                        for (int j2 = i1; j2 < j1; ++j2)
+                        {
+                            if (this.part.containsWithRotation(axisrotation, l1, i2, j2))
+                            {
+                                if (l1 == j + 1 && l1 > this.part.getStart(enumfacing$axis) && this.part.containsWithRotation(axisrotation, l1 - 1, i2, j2)) // Ignore internal boundary
+                                    continue;
+                                
+                                if (d2 >= -1.0E-7D)
+                                {
+                                    p_212431_3_ = Math.min(p_212431_3_, d2);
+                                }
+                                
+                                return p_212431_3_;
+                            }
+                        }
+                    }
+                }
+            }
+            else if (p_212431_3_ < 0.0D)
+            {
+                double d1 = p_212431_2_.getMin(enumfacing$axis);
+                int i = this.getClosestIndex(enumfacing$axis, d1 + 1.0E-7D);
+                
+                for (int k2 = i - 1; k2 >= 0; --k2)
+                {
+                    double d3 = this.getValueUnchecked(enumfacing$axis, k2 + 1) - d1;
+                    if (d3 < p_212431_3_)
+                        return p_212431_3_;
+                    
+                    for (int l2 = k; l2 < l; ++l2)
+                    {
+                        for (int i3 = i1; i3 < j1; ++i3)
+                        {
+                            if (this.part.containsWithRotation(axisrotation, k2, l2, i3))
+                            {
+                                if (k2 == i - 1 && k2 + 1 < this.part.getEnd(enumfacing$axis) && this.part.containsWithRotation(axisrotation, k2 + 1, l2, i3)) // Ignore internal boundary
+                                    continue;
+                                
+                                if (d3 <= 1.0E-7D)
+                                {
+                                    p_212431_3_ = Math.max(p_212431_3_, d3);
+                                }
+                                
+                                return p_212431_3_;
+                            }
+                        }
+                    }
+                }
+            }
+            
+            return p_212431_3_;
+        }
+    }
+    
     public String toString()
     {
         return this.isEmpty() ? "EMPTY" : "VoxelShape[" + this.getBoundingBox() + "]";
     }
+    
+    // [CM] begin
+    public boolean compare(final VoxelShape shape, final IBooleanFunction desc)
+    {
+        return VoxelShapes.compare(this, shape, desc);
+    }
+    
+    public boolean compare(final AxisAlignedBB shape, final IBooleanFunction desc)
+    {
+        return this.compare(new ocd.mcoptimizations.voxel.VoxelShapeAABB(shape), desc);
+    }
+    
+    public boolean intersects(final VoxelShape shape)
+    {
+        return VoxelShapes.compare(this, shape, ocd.mcoptimizations.util.BooleanFunction.AND);
+    }
+    
+    public boolean intersects(final AxisAlignedBB shape)
+    {
+        final int xMin = Math.max(0, this.getClosestIndex(EnumFacing.Axis.X, shape.minX + 1.0E-7D));
+        final int xMax = Math.min(this.part.getSize(EnumFacing.Axis.X), this.getClosestIndex(EnumFacing.Axis.X, shape.maxX - 1.0E-7D) + 1);
+        
+        if (xMin >= xMax)
+            return false;
+        
+        final int yMin = Math.max(0, this.getClosestIndex(EnumFacing.Axis.Y, shape.minY + 1.0E-7D));
+        final int yMax = Math.min(this.part.getSize(EnumFacing.Axis.Y), this.getClosestIndex(EnumFacing.Axis.Y, shape.maxY - 1.0E-7D) + 1);
+        
+        if (yMin >= yMax)
+            return false;
+        
+        final int zMin = Math.max(0, this.getClosestIndex(EnumFacing.Axis.Z, shape.minZ + 1.0E-7D));
+        final int zMax = Math.min(this.part.getSize(EnumFacing.Axis.Z), this.getClosestIndex(EnumFacing.Axis.Z, shape.maxZ - 1.0E-7D) + 1);
+        
+        if (zMin >= zMax)
+            return false;
+        
+        for (int x = xMin; x < xMax; ++x)
+        {
+            for (int y = yMin; y < yMax; ++y)
+            {
+                for (int z = zMin; z < zMax; ++z)
+                {
+                    if (this.part.contains(x, y, z))
+                        return true;
+                }
+            }
+        }
+        
+        return false;
+    }
+    
+    public VoxelShape persistent()
+    {
+        return this;
+    }
+    // [CM] end
 }
