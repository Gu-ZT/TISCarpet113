--- a/net/minecraft/util/math/shapes/VoxelShapes.java
+++ b/net/minecraft/util/math/shapes/VoxelShapes.java
@@ -1,5 +1,6 @@
 package net.minecraft.util.math.shapes;
 
+import carpet.settings.CarpetSettings;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.math.DoubleMath;
 import com.google.common.math.IntMath;
@@ -8,6 +9,11 @@
 import java.util.Iterator;
 import java.util.Objects;
 import java.util.stream.Stream;
+
+import me.jellysquid.mods.lithium.common.shapes.VoxelShapeAlignedCuboid;
+import me.jellysquid.mods.lithium.common.shapes.VoxelShapeEmpty;
+import me.jellysquid.mods.lithium.common.shapes.VoxelShapeSimpleCube;
+import me.jellysquid.mods.lithium.common.shapes.pairs.LithiumDoublePairList;
 import net.minecraft.util.AxisRotation;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.Util;
@@ -17,14 +23,63 @@
 
 public final class VoxelShapes
 {
-    private static final VoxelShape EMPTY = new VoxelShapeArray(new VoxelShapePartBitSet(0, 0, 0), (DoubleList)(new DoubleArrayList(new double[] {0.0D})), (DoubleList)(new DoubleArrayList(new double[] {0.0D})), (DoubleList)(new DoubleArrayList(new double[] {0.0D})));
-    private static final VoxelShape FULL_CUBE = Util.make(() ->
+    // Lithium shapes.specialized_shapes makes not final
+    private static VoxelShape EMPTY = new VoxelShapeArray(new VoxelShapePartBitSet(0, 0, 0), (DoubleList)(new DoubleArrayList(new double[] {0.0D})), (DoubleList)(new DoubleArrayList(new double[] {0.0D})), (DoubleList)(new DoubleArrayList(new double[] {0.0D})));
+
+    // Lithium shapes.specialized_shapes makes not final
+    // [CM] Changed FULL_CUBE from a final variable to a normal variable so it is switchable
+    // to completely turn off the tweak
+    public static VoxelShape FULL_CUBE_OLD = Util.make(() ->
     {
         VoxelShapePart voxelshapepart = new VoxelShapePartBitSet(1, 1, 1);
         voxelshapepart.setFilled(0, 0, 0, true, true);
         return new VoxelShapeCube(voxelshapepart);
     });
+    public static final VoxelShape FULL_CUBE_NEW = new ocd.mcoptimizations.voxel.VoxelShapeAABB(new AxisAlignedBB(0., 0., 0., 1., 1., 1.)) {
+        @Override
+        protected DoubleList getValues(final EnumFacing.Axis axis)
+        {
+            return new DoubleRangeList(1);
+        }
+        
+        @Override
+        public VoxelShape persistent()
+        {
+            return this;
+        }
+    };
+    
+    public static VoxelShape FULL_CUBE = FULL_CUBE_OLD;
+    // [CM] end
 
+
+    // Lithium shapes.specialized_shapes
+    // Re-initialize the global cached shapes with our specialized ones. This will happen right after all the static
+    // state has been initialized and before any external classes access it.
+    public static final boolean LITHIUM_SHAPES_SPECIALIZED_SHAPES_ENABLED = true;
+    private static final VoxelShapePart FULL_CUBE_VOXELS;
+
+    static
+    {
+        // [VanillaCopy] The FULL_CUBE and UNBOUNDED shape is initialized with a single 1x1x1 voxel as neither will
+        // contain multiple inner cuboids.
+        FULL_CUBE_VOXELS = new VoxelShapePartBitSet(1, 1, 1);
+        FULL_CUBE_VOXELS.setFilled(0, 0, 0, true, true);
+        if (LITHIUM_SHAPES_SPECIALIZED_SHAPES_ENABLED)
+        {
+//            // Used in some rare cases to indicate a shape which encompasses the entire world (such as a moving world border)
+//            UNBOUNDED = new VoxelShapeSimpleCube(FULL_CUBE_VOXELS, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY,
+//                    Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
+
+            // Represents a full-block cube shape, such as that for a dirt block.
+            FULL_CUBE_OLD = new VoxelShapeSimpleCube(FULL_CUBE_VOXELS, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
+
+            // Represents an empty cube shape with no vertices that cannot be collided with.
+            EMPTY = new VoxelShapeEmpty(new VoxelShapePartBitSet(0, 0, 0));
+        }
+    }
+    // Lithium shapes.specialized_shapes ends
+
     public static VoxelShape empty()
     {
         return EMPTY;
@@ -42,6 +97,12 @@
 
     public static VoxelShape create(AxisAlignedBB aabb)
     {
+        // Lithium shapes.specialized_shapes
+        if (LITHIUM_SHAPES_SPECIALIZED_SHAPES_ENABLED)
+        {
+            return create$lithium(aabb);
+        }
+
         int i = getPrecisionBits(aabb.minX, aabb.maxX);
         int j = getPrecisionBits(aabb.minY, aabb.maxY);
         int k = getPrecisionBits(aabb.minZ, aabb.maxZ);
@@ -81,10 +142,54 @@
         }
         else
         {
-            return new VoxelShapeArray(FULL_CUBE.part, new double[] {aabb.minX, aabb.maxX}, new double[] {aabb.minY, aabb.maxY}, new double[] {aabb.minZ, aabb.maxZ});
+            return !CarpetSettings.optimizeVoxelCode ?
+                    new VoxelShapeArray(FULL_CUBE.part, new double[] {aabb.minX, aabb.maxX}, new double[] {aabb.minY, aabb.maxY}, new double[] {aabb.minZ, aabb.maxZ}) :
+                    new ocd.mcoptimizations.voxel.VoxelShapeAABB.Cached(aabb);
         }
     }
 
+    // Lithium shapes.specialized_shapes
+    /**
+     * Vanilla implements some very complex logic in this function in order to allow entity boxes to be used in
+     * collision resolution the same way as block shapes. The specialized simple cube shape however can trivially
+     * represent these cases with nothing more than the two vertexes. This provides a modest speed up for entity
+     * collision code by allowing them to also use our optimized shapes.
+     * <p>
+     * Vanilla uses different kinds of VoxelShapes depending on the size and position of the box.
+     * A box that isn't aligned with 1/8th of a block will become a very simple ArrayVoxelShape, while others
+     * will become a "SimpleVoxelShape" with a BitSetVoxelSet that possibly has a higher resolution (1-3 bits) per axis.
+     * <p>
+     * Shapes that have a high resolution (e.g. extended piston base has 2 bits on one axis) have collision
+     * layers inside them. An upwards extended piston base has extra collision boxes at 0.25 and 0.5 height.
+     * Slabs don't have extra collision boxes, because they are only as high as the smallest height that is possible
+     * with their bit resolution (1, so half a block).
+     *
+     * @reason Use our optimized shape types
+     * @author JellySquid, 2No2Name
+     */
+    public static VoxelShape create$lithium(AxisAlignedBB box) {
+        int xRes;
+        int yRes;
+        int zRes;
+        //findRequiredBitResolution(...) looks unnecessarily slow, and it seems to unintentionally return -1 on inputs like -1e-8,
+        //A faster implementation is not in the scope of this mixin.
+
+        //Description of what vanilla does:
+        //If the VoxelShape cannot be represented by a BitSet with 3 bit resolution on any axis (BitSetVoxelSet),
+        //a shape without boxes inside will be used in vanilla (ArrayVoxelShape with only 2 PointPositions on each axis)
+
+        if ((xRes = VoxelShapes.getPrecisionBits(box.minX, box.maxX)) == -1 ||
+                (yRes = VoxelShapes.getPrecisionBits(box.minY, box.maxY)) == -1 ||
+                (zRes = VoxelShapes.getPrecisionBits(box.minZ, box.maxZ)) == -1) {
+            //vanilla uses ArrayVoxelShape here without any rounding of the coordinates
+            return new VoxelShapeSimpleCube(FULL_CUBE_VOXELS, box.minX, box.minY, box.minZ, box.maxX, box.maxY, box.maxZ);
+        } else {
+            // vanilla would use a SimpleVoxelShape with a BitSetVoxelSet of resolution of xRes, yRes, zRes here, we match its behavior
+            return new VoxelShapeAlignedCuboid(Math.round(box.minX * 8D) / 8D, Math.round(box.minY * 8D) / 8D, Math.round(box.minZ * 8D) / 8D,
+                    Math.round(box.maxX * 8D) / 8D, Math.round(box.maxY * 8D) / 8D, Math.round(box.maxZ * 8D) / 8D, xRes, yRes, zRes);
+        }
+    }
+
     private static int getPrecisionBits(double p_197885_0_, double p_197885_2_)
     {
         if (!(p_197885_0_ < -1.0E-7D) && !(p_197885_2_ > 1.0000001D))
@@ -312,7 +417,9 @@
         }
         else
         {
-            return new IndirectMerger(list1, list2, p_199410_3_, p_199410_4_);
+            // Lithium shapes.shape_merging
+            // return new IndirectMerger(list1, list2, p_199410_3_, p_199410_4_);
+            return new LithiumDoublePairList(list1, list2, p_199410_3_, p_199410_4_);
         }
     }
 
