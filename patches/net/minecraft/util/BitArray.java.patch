--- a/net/minecraft/util/BitArray.java
+++ b/net/minecraft/util/BitArray.java
@@ -1,8 +1,11 @@
 package net.minecraft.util;
 
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.world.chunk.IBlockStatePalette;
 import org.apache.commons.lang3.Validate;
 
+import java.util.Objects;
+
 public class BitArray
 {
     private final long[] longArray;
@@ -81,4 +84,72 @@
     {
         return this.bitsPerEntry;
     }
+
+    // Lithium chunk.serialization
+    // from Lithium 0.5.0 (before the change for 20w18a)
+    // https://github.com/CaffeineMC/lithium-fabric/blob/b9e89eae616088eab13154d100da8ec742b7aaf0/src/main/java/me/jellysquid/mods/lithium/mixin/chunk/serialization/MixinPackedIntegerArray.java
+    public <T> void compact(IBlockStatePalette<T> srcPalette, IBlockStatePalette<T> dstPalette, short[] out) {
+        if (this.arraySize >= Short.MAX_VALUE) {
+            throw new IllegalStateException("Array too large");
+        }
+
+        if (this.arraySize != out.length) {
+            throw new IllegalStateException("Array size mismatch");
+        }
+
+        short[] mappings = new short[(int) (this.maxEntryValue + 1)];
+
+        long[] storage = this.longArray;
+        int size = this.arraySize;
+        int elementBits = this.bitsPerEntry;
+
+        int arrayLen = storage.length;
+        int prevWordIdx = 0;
+
+        long word = storage[0];
+        long nextWord = (arrayLen > 1) ? storage[1] : 0L;
+
+        int bits = 0;
+        int idx = 0;
+
+        while (idx < size) {
+            int wordIdx = bits >> 6;
+            int nextWordIdx = ((bits + elementBits) - 1) >> 6;
+
+            int bitIdx = bits ^ (wordIdx << 6);
+
+            if (wordIdx != prevWordIdx) {
+                word = nextWord;
+
+                if ((wordIdx + 1) < arrayLen) {
+                    nextWord = storage[wordIdx + 1];
+                } else {
+                    nextWord = 0L;
+                }
+
+                prevWordIdx = wordIdx;
+            }
+
+            int value;
+
+            if (wordIdx == nextWordIdx) {
+                value = (int) ((word >>> bitIdx) & this.maxEntryValue);
+            } else {
+                value = (int) (((word >>> bitIdx) | (nextWord << (64 - bitIdx))) & this.maxEntryValue);
+            }
+
+            int remappedId = mappings[value];
+
+            if (remappedId == 0) {
+                remappedId = dstPalette.idFor(Objects.requireNonNull(srcPalette.get(value))) + 1;
+
+                mappings[value] = (short) remappedId;
+            }
+
+            out[idx] = (short) (remappedId - 1);
+
+            bits += elementBits;
+            idx++;
+        }
+    }
 }
