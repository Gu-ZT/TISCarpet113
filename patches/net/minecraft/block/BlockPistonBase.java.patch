--- a/net/minecraft/block/BlockPistonBase.java
+++ b/net/minecraft/block/BlockPistonBase.java
@@ -1,9 +1,10 @@
 package net.minecraft.block;
 
+import carpet.helpers.BedrockBreakingStatHelper;
+import carpet.logging.microtiming.marker.MicroTimingMarkerManager;
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.util.List;
-import java.util.Set;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.BlockPistonStructureHelper;
@@ -31,8 +32,13 @@
 import net.minecraft.world.IBlockReader;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import redstone.multimeter.block.MeterableBlock;
+import redstone.multimeter.server.Multimeter;
 
-public class BlockPistonBase extends BlockDirectional
+import java.util.List;
+import java.util.Set;
+
+public class BlockPistonBase extends BlockDirectional implements MeterableBlock /*RSMM*/
 {
     public static final BooleanProperty EXTENDED = BlockStateProperties.EXTENDED;
     protected static final VoxelShape PISTON_BASE_EAST_AABB = Block.makeCuboidShape(0.0D, 0.0D, 0.0D, 12.0D, 16.0D, 16.0D);
@@ -43,6 +49,9 @@
     protected static final VoxelShape PISTON_BASE_DOWN_AABB = Block.makeCuboidShape(0.0D, 4.0D, 0.0D, 16.0D, 16.0D, 16.0D);
     private final boolean isSticky;
 
+    // Lithium alloc.enum_values
+    private static final EnumFacing[] ENUM_FACINGS = EnumFacing.values();
+
     public BlockPistonBase(boolean sticky, Block.Properties properties)
     {
         super(properties);
@@ -156,9 +165,17 @@
         }
     }
 
-    private boolean shouldBeExtended(World worldIn, BlockPos pos, EnumFacing facing)
+    // RSMM wrapped method
+    private boolean shouldBeExtended(World world, BlockPos pos, EnumFacing facing) {
+        boolean powered = _shouldBeExtended(world, pos, facing);
+        logPowered(world, pos, powered);
+        return powered;
+    }
+
+    private boolean _shouldBeExtended(World worldIn, BlockPos pos, EnumFacing facing)
     {
-        for (EnumFacing enumfacing : EnumFacing.values())
+        // Lithium alloc.enum_values
+        for (EnumFacing enumfacing : ENUM_FACINGS)
         {
             if (enumfacing != facing && worldIn.isSidePowered(pos.offset(enumfacing), enumfacing))
             {
@@ -172,9 +189,17 @@
         }
         else
         {
+            // [CM] QuasiConnectivity Tweak For Pistons
+            if (!CarpetSettings.quasiConnectivity)
+            {
+                return false;
+            }
+            // [CM] End
+
             BlockPos blockpos = pos.up();
 
-            for (EnumFacing enumfacing1 : EnumFacing.values())
+            // Lithium alloc.enum_values
+            for (EnumFacing enumfacing1 : ENUM_FACINGS)
             {
                 if (enumfacing1 != EnumFacing.DOWN && worldIn.isSidePowered(blockpos.offset(enumfacing1), enumfacing1))
                 {
@@ -186,6 +211,15 @@
         }
     }
 
+    // TISCM break_bedrock stat
+    private void tryAddNearestPlayerStats(World worldIn, BlockPos pistonPos, BlockPos bedrockPos)
+    {
+        if (worldIn.getBlockState(bedrockPos).getBlock() == Blocks.BEDROCK)
+        {
+            BedrockBreakingStatHelper.onBedrockYeeted(worldIn, pistonPos, bedrockPos);
+        }
+    }
+
     public boolean eventReceived(IBlockState state, World worldIn, BlockPos pos, int id, int param)
     {
         EnumFacing enumfacing = state.get(FACING);
@@ -255,6 +289,9 @@
                 {
                     if (id != 1 || iblockstate.isAir() || !canPush(iblockstate, worldIn, blockpos, enumfacing.getOpposite(), false, enumfacing) || iblockstate.getPushReaction() != EnumPushReaction.NORMAL && block != Blocks.PISTON && block != Blocks.STICKY_PISTON)
                     {
+                        // TISCM break_bedrock stat
+                        tryAddNearestPlayerStats(worldIn, pos, pos.offset(enumfacing));
+
                         worldIn.removeBlock(pos.offset(enumfacing));
                     }
                     else
@@ -265,12 +302,14 @@
             }
             else
             {
+                // TISCM break_bedrock stat
+                tryAddNearestPlayerStats(worldIn, pos, pos.offset(enumfacing));
+
                 worldIn.removeBlock(pos.offset(enumfacing));
             }
 
             worldIn.playSound((EntityPlayer)null, pos, SoundEvents.BLOCK_PISTON_CONTRACT, SoundCategory.BLOCKS, 0.5F, worldIn.rand.nextFloat() * 0.15F + 0.6F);
         }
-
         return true;
     }
 
@@ -316,8 +355,14 @@
                 {
                     return false;
                 }
-
-                return !block.hasTileEntity();
+    
+                // [CM] Movable TE's CARPET-DeadlyMC
+                if(!block.hasTileEntity())
+                    return true;
+                else if(CarpetSettings.movableTileEntities)
+                    return isPushableTileEntityBlock(block);
+                else
+                    return false;
             }
             else
             {
@@ -329,6 +374,14 @@
             return false;
         }
     }
+    
+    // [CM] Movable TE's CARPET-DeadlyMC
+    private static boolean isPushableTileEntityBlock(Block block)
+    {
+        // Making MOVING_PISTON (BlockPistonMoving) pushable would not work as its createNewTileEntity()-method returns null
+        return block != Blocks.ENDER_CHEST && block != Blocks.ENCHANTING_TABLE && block != Blocks.END_GATEWAY
+                       && block != Blocks.END_PORTAL && block != Blocks.SPAWNER && block != Blocks.MOVING_PISTON;
+    }
 
     private boolean doMove(World worldIn, BlockPos pos, EnumFacing direction, boolean extending)
     {
@@ -371,15 +424,55 @@
                 --k;
                 aiblockstate[k] = iblockstate;
             }
+    
+            List<TileEntity> list1_TileEntities = Lists.<TileEntity>newArrayList();
+            // [CM] Movable TE's CARPET-DeadlyMC
+            if(CarpetSettings.movableTileEntities)
+            {
+                for (int i = 0; i < list.size(); ++i)
+                {
+                    BlockPos blockposnew = list.get(i);
+                    TileEntity tileentity = worldIn.getTileEntity(blockposnew);
+                    list1_TileEntities.add(tileentity);
+            
+                    if(tileentity != null)
+                    {
+                        worldIn.removeTileEntity(blockposnew);
+                        tileentity.markDirty();
+                    }
+                }
+            }
 
             for (int l = list.size() - 1; l >= 0; --l)
             {
                 BlockPos blockpos3 = list.get(l);
                 IBlockState iblockstate3 = worldIn.getBlockState(blockpos3);
+                // RSMM start
+                if (CarpetSettings.modRedstoneMultimeter && !worldIn.isRemote()) {
+                    Multimeter multimeter = ((WorldServer)worldIn).getMultimeter();
+                    multimeter.logMoved(worldIn, blockpos3, enumfacing);
+                    multimeter.moveMeters(worldIn, blockpos3, enumfacing);
+                }
+                // RSMM end
                 blockpos3 = blockpos3.offset(enumfacing);
                 set.remove(blockpos3);
                 worldIn.setBlockState(blockpos3, Blocks.MOVING_PISTON.getDefaultState().with(FACING, direction), 68);
-                worldIn.setTileEntity(blockpos3, BlockPistonMoving.createTilePiston(list1.get(l), direction, extending, false));
+    
+                // [CM] Movable TE's CARPET-DeadlyMC
+                if (!CarpetSettings.movableTileEntities)
+                {
+                    worldIn.setTileEntity(blockpos3, BlockPistonMoving.createTilePiston(list1.get(l), direction, extending, false));
+                }
+                else
+                {
+                    TileEntity tilePiston = BlockPistonMoving.createTilePiston(list1.get(l), direction, extending, false);
+                    ((TileEntityPiston)tilePiston).setCarriedTileEntity(list1_TileEntities.get(l));
+                    worldIn.setTileEntity(blockpos3, tilePiston);
+                }
+
+                // TISCM Micro Timing logger
+                MicroTimingMarkerManager.getInstance().moveMarker(worldIn, blockpos3, direction);
+                
                 --k;
                 aiblockstate[k] = iblockstate3;
             }
@@ -450,4 +543,22 @@
     {
         return false;
     }
+
+    // RSMM
+    @Override
+    public boolean logPoweredOnBlockUpdate() {
+        return false;
+    }
+
+    // RSMM
+    @Override
+    public boolean isPowered(World world, BlockPos pos, IBlockState state) {
+        return shouldBeExtended(world, pos, state.get(FACING));
+    }
+
+    // RSMM
+    @Override
+    public boolean isActive(World world, BlockPos pos, IBlockState state) {
+        return state.get(EXTENDED);
+    }
 }
