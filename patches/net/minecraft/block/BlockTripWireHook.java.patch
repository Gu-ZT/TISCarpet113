--- a/net/minecraft/block/BlockTripWireHook.java
+++ b/net/minecraft/block/BlockTripWireHook.java
@@ -1,5 +1,7 @@
 package net.minecraft.block;
 
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.EventType;
 import com.google.common.base.MoreObjects;
 import java.util.Random;
 import javax.annotation.Nullable;
@@ -26,8 +28,10 @@
 import net.minecraft.world.IWorld;
 import net.minecraft.world.IWorldReaderBase;
 import net.minecraft.world.World;
+import redstone.multimeter.block.Meterable;
+import redstone.multimeter.block.PowerSource;
 
-public class BlockTripWireHook extends Block
+public class BlockTripWireHook extends Block implements Meterable /*RSMM*/, PowerSource /*RSMM*/
 {
     public static final DirectionProperty FACING = BlockHorizontal.HORIZONTAL_FACING;
     public static final BooleanProperty POWERED = BlockStateProperties.POWERED;
@@ -230,8 +234,10 @@
 
     private void notifyNeighbors(World worldIn, BlockPos pos, EnumFacing side)
     {
+        MicroTimingLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_START, "notifyNeighbors");  // TISCM Micro Timing logger
         worldIn.notifyNeighborsOfStateChange(pos, this);
         worldIn.notifyNeighborsOfStateChange(pos.offset(side.getOpposite()), this);
+        MicroTimingLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_END, "notifyNeighbors");  // TISCM Micro Timing logger
     }
 
     public void onReplaced(IBlockState state, World worldIn, BlockPos pos, IBlockState newState, boolean isMoving)
@@ -302,4 +308,16 @@
     {
         return BlockFaceShape.UNDEFINED;
     }
+
+    // RSMM
+    @Override
+    public boolean isActive(World world, BlockPos pos, IBlockState state) {
+        return state.get(POWERED);
+    }
+
+    // RSMM
+    @Override
+    public int getPowerLevel(World world, BlockPos pos, IBlockState state) {
+        return state.get(POWERED) ? MAX_POWER : MIN_POWER;
+    }
 }
