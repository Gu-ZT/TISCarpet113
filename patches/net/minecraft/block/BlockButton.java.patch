--- a/net/minecraft/block/BlockButton.java
+++ b/net/minecraft/block/BlockButton.java
@@ -2,7 +2,11 @@
 
 import java.util.List;
 import java.util.Random;
+
 import javax.annotation.Nullable;
+
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.EventType;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
@@ -22,8 +26,10 @@
 import net.minecraft.world.IWorld;
 import net.minecraft.world.IWorldReaderBase;
 import net.minecraft.world.World;
+import redstone.multimeter.block.Meterable;
+import redstone.multimeter.block.PowerSource;
 
-public abstract class BlockButton extends BlockHorizontalFace
+public abstract class BlockButton extends BlockHorizontalFace implements Meterable /*RSMM*/, PowerSource /*RSMM*/
 {
     public static final BooleanProperty POWERED = BlockStateProperties.POWERED;
     protected static final VoxelShape field_196370_b = Block.makeCuboidShape(6.0D, 14.0D, 5.0D, 10.0D, 16.0D, 11.0D);
@@ -202,8 +208,10 @@
 
     private void updateNeighbors(IBlockState p_196368_1_, World p_196368_2_, BlockPos p_196368_3_)
     {
+        MicroTimingLoggerManager.onEmitBlockUpdate(p_196368_2_, this, p_196368_3_, EventType.ACTION_START, "updateNeighbors");  // TISCM Micro Timing logger
         p_196368_2_.notifyNeighborsOfStateChange(p_196368_3_, this);
         p_196368_2_.notifyNeighborsOfStateChange(p_196368_3_.offset(getFacing(p_196368_1_).getOpposite()), this);
+        MicroTimingLoggerManager.onEmitBlockUpdate(p_196368_2_, this, p_196368_3_, EventType.ACTION_END, "updateNeighbors");  // TISCM Micro Timing logger
     }
 
     protected void fillStateContainer(StateContainer.Builder<Block, IBlockState> builder)
@@ -215,4 +223,16 @@
     {
         return BlockFaceShape.UNDEFINED;
     }
+
+    // RSMM
+    @Override
+    public boolean isActive(World world, BlockPos pos, IBlockState state) {
+        return state.get(POWERED);
+    }
+
+    // RSMM
+    @Override
+    public int getPowerLevel(World world, BlockPos pos, IBlockState state) {
+        return state.get(POWERED) ? MAX_POWER : MIN_POWER;
+    }
 }
