--- a/net/minecraft/block/BlockRedstoneDiode.java
+++ b/net/minecraft/block/BlockRedstoneDiode.java
@@ -1,6 +1,8 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
+import carpet.microtick.MicroTickLoggerManager;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EntityLivingBase;
@@ -53,14 +55,17 @@
             if (flag && !flag1)
             {
                 worldIn.setBlockState(pos, state.with(POWERED, Boolean.valueOf(false)), 2);
+                MicroTickLoggerManager.onComponentPowered(worldIn, pos, false); // TISCM Micro Tick logger
             }
             else if (!flag)
             {
                 worldIn.setBlockState(pos, state.with(POWERED, Boolean.valueOf(true)), 2);
+                MicroTickLoggerManager.onComponentPowered(worldIn, pos, true); // TISCM Micro Tick logger
 
                 if (!flag1)
                 {
                     worldIn.getPendingBlockTicks().scheduleTick(pos, this, this.getDelay(state), TickPriority.HIGH);
+                    MicroTickLoggerManager.onComponentAddToTileTickList(worldIn, pos, this.getDelay(state), TickPriority.HIGH); // TISCM Micro Tick logger
                 }
             }
         }
@@ -94,7 +99,7 @@
             state.dropBlockAsItem(worldIn, pos, 0);
             worldIn.removeBlock(pos);
 
-            for (EnumFacing enumfacing : EnumFacing.values())
+            for (EnumFacing enumfacing : EnumFacing.ENUM_FACING_VALUES)
             {
                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
             }
@@ -122,6 +127,7 @@
                 }
 
                 worldIn.getPendingBlockTicks().scheduleTick(pos, this, this.getDelay(state), tickpriority);
+                MicroTickLoggerManager.onComponentAddToTileTickList(worldIn, pos, this.getDelay(state), tickpriority); // TISCM Micro Tick logger
             }
         }
     }
@@ -198,6 +204,7 @@
         if (this.shouldBePowered(worldIn, pos, state))
         {
             worldIn.getPendingBlockTicks().scheduleTick(pos, this, 1);
+            MicroTickLoggerManager.onComponentAddToTileTickList(worldIn, pos, 1); // TISCM Micro Tick logger
         }
     }
 
