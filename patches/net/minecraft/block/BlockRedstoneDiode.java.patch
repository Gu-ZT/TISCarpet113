--- a/net/minecraft/block/BlockRedstoneDiode.java
+++ b/net/minecraft/block/BlockRedstoneDiode.java
@@ -1,6 +1,7 @@
 package net.minecraft.block;
 
-import java.util.Random;
+import carpet.microtick.MicroTickLoggerManager;
+import carpet.microtick.enums.EventType;
 import net.minecraft.block.state.BlockFaceShape;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EntityLivingBase;
@@ -18,6 +19,8 @@
 import net.minecraft.world.TickPriority;
 import net.minecraft.world.World;
 
+import java.util.Random;
+
 public abstract class BlockRedstoneDiode extends BlockHorizontal
 {
     protected static final VoxelShape SHAPE = Block.makeCuboidShape(0.0D, 0.0D, 0.0D, 16.0D, 2.0D, 16.0D);
@@ -94,7 +97,7 @@
             state.dropBlockAsItem(worldIn, pos, 0);
             worldIn.removeBlock(pos);
 
-            for (EnumFacing enumfacing : EnumFacing.values())
+            for (EnumFacing enumfacing : EnumFacing.ENUM_FACING_VALUES)
             {
                 worldIn.notifyNeighborsOfStateChange(pos.offset(enumfacing), this);
             }
@@ -222,10 +225,12 @@
 
     protected void notifyNeighbors(World worldIn, BlockPos pos, IBlockState state)
     {
+        MicroTickLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_START, "notifyNeighbors");  // TISCM Micro Tick logger
         EnumFacing enumfacing = state.get(HORIZONTAL_FACING);
         BlockPos blockpos = pos.offset(enumfacing.getOpposite());
         worldIn.neighborChanged(blockpos, this, pos);
         worldIn.notifyNeighborsOfStateExcept(blockpos, this, enumfacing);
+        MicroTickLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_END, "notifyNeighbors");  // TISCM Micro Tick logger
     }
 
     protected boolean isAlternateInput(IBlockState state)
