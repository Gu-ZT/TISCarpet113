--- a/net/minecraft/block/BlockObserver.java
+++ b/net/minecraft/block/BlockObserver.java
@@ -1,6 +1,9 @@
 package net.minecraft.block;
 
 import java.util.Random;
+
+import carpet.logging.microtiming.MicroTimingLoggerManager;
+import carpet.logging.microtiming.enums.EventType;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.item.BlockItemUseContext;
 import net.minecraft.state.BooleanProperty;
@@ -13,8 +16,10 @@
 import net.minecraft.world.IBlockReader;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
+import redstone.multimeter.block.Meterable;
+import redstone.multimeter.block.PowerSource;
 
-public class BlockObserver extends BlockDirectional
+public class BlockObserver extends BlockDirectional implements Meterable /*RSMM*/, PowerSource /*RSMM*/
 {
     public static final BooleanProperty POWERED = BlockStateProperties.POWERED;
 
@@ -74,10 +79,12 @@
 
     protected void updateNeighborsInFront(World worldIn, BlockPos pos, IBlockState state)
     {
+        MicroTimingLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_START, "updateNeighborsInFront");  // TISCM Micro Timing logger
         EnumFacing enumfacing = state.get(FACING);
         BlockPos blockpos = pos.offset(enumfacing.getOpposite());
         worldIn.neighborChanged(blockpos, this, pos);
         worldIn.notifyNeighborsOfStateExcept(blockpos, this, enumfacing);
+        MicroTimingLoggerManager.onEmitBlockUpdate(worldIn, this, pos, EventType.ACTION_END, "updateNeighborsInFront");  // TISCM Micro Timing logger
     }
 
     public boolean canProvidePower(IBlockState state)
@@ -123,4 +130,16 @@
     {
         return this.getDefaultState().with(FACING, context.getNearestLookingDirection().getOpposite().getOpposite());
     }
+
+    // RSMM
+    @Override
+    public boolean isActive(World world, BlockPos pos, IBlockState state) {
+        return state.get(POWERED);
+    }
+
+    // RSMM
+    @Override
+    public int getPowerLevel(World world, BlockPos pos, IBlockState state) {
+        return state.get(POWERED) ? MAX_POWER : MIN_POWER;
+    }
 }
