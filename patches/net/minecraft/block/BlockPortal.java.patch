--- a/net/minecraft/block/BlockPortal.java
+++ b/net/minecraft/block/BlockPortal.java
@@ -1,5 +1,8 @@
 package net.minecraft.block;
 
+import carpet.commands.lifetime.spawning.LiteralSpawningReason;
+import carpet.utils.portalsearcher.SuperCacheHandler;
+import carpet.settings.CarpetSettings;
 import com.google.common.cache.LoadingCache;
 import java.util.Random;
 import javax.annotation.Nullable;
@@ -28,6 +31,7 @@
 import net.minecraft.world.IBlockReader;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
@@ -73,6 +77,9 @@
 
                 if (entity != null)
                 {
+                    // TISCM lifetime tracker
+                    entity.recordSpawning(LiteralSpawningReason.PORTAL_PIGMAN);
+
                     entity.timeUntilPortal = entity.getPortalCooldown();
                 }
             }
@@ -91,6 +98,12 @@
         if (blockportal$size != null)
         {
             blockportal$size.placePortalBlocks();
+            //CM
+            if (CarpetSettings.portalCaching)
+            {
+                ((WorldServer) worldIn).getDefaultTeleporter().clearHistoryCache();
+            }
+            //CM END
             return true;
         }
         else
@@ -120,6 +133,22 @@
         EnumFacing.Axis enumfacing$axis = facing.getAxis();
         EnumFacing.Axis enumfacing$axis1 = stateIn.get(AXIS);
         boolean flag = enumfacing$axis1 != enumfacing$axis && enumfacing$axis.isHorizontal();
+        //CM
+        if (CarpetSettings.portalCaching) // broken down statement below to accomodate for clear cache call
+        {
+            if (!flag && facingState.getBlock() != this && !(new BlockPortal.Size(worldIn, currentPos, enumfacing$axis1)).func_208508_f())
+            {
+                if (worldIn instanceof WorldServer) {
+                    ((WorldServer) worldIn).getDefaultTeleporter().clearHistoryCache();
+                }
+                return Blocks.AIR.getDefaultState();
+            }
+            else
+            {
+                return super.updatePostPlacement(stateIn, facing, facingState, worldIn, currentPos, facingPos);
+            }
+        }
+        //
         return !flag && facingState.getBlock() != this && !(new BlockPortal.Size(worldIn, currentPos, enumfacing$axis1)).func_208508_f() ? Blocks.AIR.getDefaultState() : super.updatePostPlacement(stateIn, facing, facingState, worldIn, currentPos, facingPos);
     }
 
@@ -174,6 +203,20 @@
         }
     }
 
+    // TISCM betterPortalSearcher
+    @Override
+    public void onReplaced(IBlockState state, World worldIn, BlockPos pos, IBlockState newState, boolean isMoving) {
+        SuperCacheHandler.removePortal(worldIn, pos);
+        super.onReplaced(state, worldIn, pos, newState, isMoving);
+    }
+
+    @Override
+    public void onBlockAdded(IBlockState state, World worldIn, BlockPos pos, IBlockState oldState) {
+        SuperCacheHandler.addPortal(worldIn, pos);
+        super.onBlockAdded(state, worldIn, pos, oldState);
+    }
+    // end TISCM betterPortalSearcher
+
     public ItemStack getItem(IBlockReader worldIn, BlockPos pos, IBlockState state)
     {
         return ItemStack.EMPTY;
