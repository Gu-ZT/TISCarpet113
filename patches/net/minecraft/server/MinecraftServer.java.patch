--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1,5 +1,15 @@
 package net.minecraft.server;
 
+import carpet.CarpetServer;
+import carpet.commands.EpsCommand;
+import carpet.helpers.ThrowableSuppression;
+import carpet.helpers.TickSpeed;
+import carpet.microtiming.MicroTimingLoggerManager;
+import carpet.microtiming.enums.TickStage;
+import carpet.microtiming.tickstages.LiteralTickStageExtra;
+import carpet.settings.CarpetSettings;
+import carpet.utils.CarpetProfiler;
+import carpet.utils.Messenger;
 import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -178,6 +188,7 @@
     public final Queue < FutureTask<? >> futureTaskQueue = Queues.newConcurrentLinkedQueue();
     private Thread serverThread;
     private long serverTime = Util.milliTime();
+    public long actualServerTime = Util.milliTime();
     @OnlyIn(Dist.CLIENT)
     private boolean worldIconSet;
     private final IReloadableResourceManager resourceManager = new SimpleReloadableResourceManager(ResourcePackType.SERVER_DATA);
@@ -212,6 +223,8 @@
         this.resourceManager.addReloadListener(this.lootTableManager);
         this.resourceManager.addReloadListener(this.functionManager);
         this.resourceManager.addReloadListener(this.advancementManager);
+        //CM
+        CarpetServer.init(this);
     }
 
     public abstract boolean init() throws IOException;
@@ -571,6 +584,7 @@
     public void stopServer()
     {
         LOGGER.info("Stopping server");
+        CarpetServer.onServerClosed(this);
 
         if (this.getNetworkSystem() != null)
         {
@@ -642,31 +656,53 @@
             if (this.init())
             {
                 this.serverTime = Util.milliTime();
-                this.statusResponse.setServerDescription(new TextComponentString(this.motd));
+                // [CM] if statement around -- CustomMOTD
+                checkMOTD();
+                // [CM] End -- CustomMOTD
                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.13.2", 404));
                 this.applyServerIconToResponse(this.statusResponse);
 
-                while (this.serverRunning)
-                {
-                    long i = Util.milliTime() - this.serverTime;
-
-                    if (i > 2000L && this.serverTime - this.timeOfLastWarning >= 15000L)
+                while (this.serverRunning) {
+                    //TISCM EPS if statement
+                    if (!CarpetSettings.isEpsActive)
                     {
-                        long j = i / 50L;
-                        LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
-                        this.serverTime += j * 50L;
-                        this.timeOfLastWarning = this.serverTime;
-                    }
+                        /* carpet mod commandTick */
+                        //todo check if this check is necessary
+                        if (TickSpeed.time_warp_start_time != 0) {
+                            if (TickSpeed.continueWarp()) {
+                                this.tick(() -> true);
+                                this.serverTime = Util.milliTime();
+                                this.actualServerTime = Util.milliTime();
+                                this.serverIsRunning = true;
+                            }
+                            continue;
+                        }
+                        long i = Util.milliTime() - this.serverTime;
 
-                    this.tick(this::isAheadOfTime);
-                    this.serverTime += 50L;
+                        if (i > 2000L && this.serverTime - this.timeOfLastWarning >= 15000L) {
+                            long j = (long)(i / TickSpeed.mspt);//50L;
+                            LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+                            this.serverTime += (long)(j * TickSpeed.mspt);//50L;
+                            this.timeOfLastWarning = this.serverTime;
+                        }
 
-                    while (this.isAheadOfTime())
-                    {
-                        Thread.sleep(1L);
-                    }
+                        this.tick(this::isAheadOfTime);
+                        //[CM] NOTE: serverTime doesn't indicate current time, but server wannabe-time
+                        // only corrected if it falls behind more than 2000 and manages to catch the warning
+                        // which releases accrued time it falls behind, not 1 tick, but MULTIPLE ticks
+                        this.actualServerTime = Util.milliTime();
+                        this.serverTime += (long)TickSpeed.mspt;//50L;
 
-                    this.serverIsRunning = true;
+                        while (this.isAheadOfTime()) {
+                            Thread.sleep(1L);
+                        }
+
+                        this.serverIsRunning = true;
+                    }
+                    //TISCM EPS code
+                    else {
+                        EpsCommand.runTest(this);
+                    }
                 }
             }
             else
@@ -782,6 +818,12 @@
     {
         long i = Util.nanoTime();
         ++this.tickCounter;
+        //[CM]
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.start_tick_profiling();
+        }
+        // [CM end]
 
         if (this.startProfiling)
         {
@@ -790,6 +832,9 @@
         }
 
         this.profiler.startSection("root");
+
+        CarpetServer.tick(this);
+
         this.updateTimeLightAndEntities(hasTimeLeft);
 
         if (i - this.nanoTimeSinceStatusRefresh >= 5000000000L)
@@ -810,10 +855,16 @@
 
         if (this.tickCounter % 900 == 0)
         {
+            CarpetProfiler.start_section(null, "Autosave");
+            MicroTimingLoggerManager.setTickStage(TickStage.AUTO_SAVE); // TISCM Micro Timing logger
             this.profiler.startSection("save");
             this.playerList.saveAllPlayerData();
             this.saveAllWorlds(true);
             this.profiler.endSection();
+            CarpetProfiler.end_current_section();
+
+            // TISCM Autosave logger
+            // AutoSaveLogHelper.onAutoSave(this.getWorld(DimensionType.OVERWORLD).getGameTime(), tickCounter);
         }
 
         this.profiler.startSection("snooper");
@@ -829,16 +880,25 @@
         }
 
         this.profiler.endSection();
+        //CM scarpet events
+        CarpetServer.scriptServer.events.onTick();
+        //
         this.profiler.startSection("tallying");
         long l = this.tickTimeArray[this.tickCounter % 100] = Util.nanoTime() - i;
         this.tickTime = this.tickTime * 0.8F + (float)l / 1000000.0F * 0.19999999F;
         this.profiler.endSection();
         this.profiler.endSection();
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.end_tick_profiling(this);
+        }
     }
 
     public void updateTimeLightAndEntities(BooleanSupplier hasTimeLeft)
     {
         this.profiler.startSection("jobs");
+        MicroTimingLoggerManager.setTickStage(TickStage.PLAYER_ACTION);  // TISCM Micro Timing logger
+        MicroTimingLoggerManager.setTickStageExtra(LiteralTickStageExtra.SYNC_TASKS);  // TISCM Micro Timing logger
         FutureTask<?> futuretask;
 
         while ((futuretask = this.futureTaskQueue.poll()) != null)
@@ -847,6 +907,7 @@
         }
 
         this.profiler.endStartSection("commandFunctions");
+        MicroTimingLoggerManager.setTickStage(TickStage.COMMAND_FUNCTION); // TISCM Micro Timing logger
         this.getFunctionManager().tick();
         this.profiler.endStartSection("levels");
 
@@ -870,26 +931,44 @@
 
                 this.profiler.startSection("tick");
 
+                // Update suppression fix
                 try
                 {
                     worldserver.tick(hasTimeLeft);
                 }
+                catch (ThrowableSuppression e) {
+                    Messenger.print_server_message(this, "You just caused a server crash in world tick");
+                }
                 catch (Throwable throwable1)
                 {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Exception ticking world");
                     worldserver.fillCrashReport(crashreport);
-                    throw new ReportedException(crashreport);
+                    if (!CarpetSettings.updateSuppressionCrashFix || !(crashreport.getCrashCause() instanceof ThrowableSuppression)) {
+                        throw new ReportedException(crashreport);
+                    }
+                    else {
+                        Messenger.print_server_message(this, "You just caused a server crash in world tick");
+                    }
                 }
 
+                // Update suppression fix
                 try
                 {
                     worldserver.tickEntities();
                 }
+                catch (ThrowableSuppression e) {
+                    Messenger.print_server_message(this, "You just caused a server crash in update entities.");
+                }
                 catch (Throwable throwable)
                 {
                     CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Exception ticking world entities");
                     worldserver.fillCrashReport(crashreport1);
-                    throw new ReportedException(crashreport1);
+                    if (!CarpetSettings.updateSuppressionCrashFix || !(crashreport1.getCrashCause() instanceof ThrowableSuppression)) {
+                        throw new ReportedException(crashreport1);
+                    }
+                    else {
+                        Messenger.print_server_message(this, "You just caused a server crash in update entities.");
+                    }
                 }
 
                 this.profiler.endSection();
@@ -905,10 +984,13 @@
             }))[this.tickCounter % 100] = Util.nanoTime() - i;
         }
 
+        CarpetProfiler.start_section(null, "Network");
+        MicroTimingLoggerManager.setTickStage(TickStage.NETWORK); // TISCM Micro Timing logger
         this.profiler.endStartSection("connection");
         this.getNetworkSystem().tick();
         this.profiler.endStartSection("players");
         this.playerList.tick();
+        CarpetProfiler.end_current_section();
         this.profiler.endStartSection("tickables");
 
         for (int j = 0; j < this.tickables.size(); ++j)
@@ -1142,7 +1224,8 @@
 
     public String getServerModName()
     {
-        return "vanilla";
+        // return "vanilla";
+        return CarpetServer.MINECRAFT_BRAND;
     }
 
     public CrashReport addServerInfoToCrashReport(CrashReport report)
@@ -1605,6 +1688,12 @@
     {
         return this.serverTime;
     }
+    public void dontPanic()
+    {
+        this.serverTime = Util.milliTime();
+        this.actualServerTime = Util.milliTime();
+        this.serverIsRunning = true;
+    }
 
     public Thread getServerThread()
     {
@@ -1825,4 +1914,12 @@
             return 0;
         }
     }
+    public void checkMOTD()
+    {
+        if ("_".equals(CarpetSettings.customMOTD))
+            this.statusResponse.setServerDescription(new TextComponentString(this.motd));
+        else
+            this.statusResponse.setServerDescription(new TextComponentString(CarpetSettings.customMOTD));
+
+    }
 }
