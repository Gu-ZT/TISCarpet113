--- a/net/minecraft/server/management/PlayerChunkMapEntry.java
+++ b/net/minecraft/server/management/PlayerChunkMapEntry.java
@@ -1,9 +1,15 @@
 package net.minecraft.server.management;
 
+import carpet.settings.CarpetSettings;
+import carpet.utils.LightTrackingHooks;
 import com.google.common.collect.Lists;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.shorts.ShortLinkedOpenHashSet;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.Packet;
 import net.minecraft.network.play.server.SPacketBlockChange;
@@ -25,14 +31,26 @@
     private final PlayerChunkMap playerChunkMap;
     private final List<EntityPlayerMP> players = Lists.newArrayList();
     private final ChunkPos pos;
-    private final short[] changedBlocks = new short[64];
+    // TISCM chunkPacketThreshold removed final
+    private short[] changedBlocks = new short[64];
     @Nullable
     private Chunk chunk;
     private int changes;
     private int changedSectionFilter;
     private long lastUpdateInhabitedTime;
     private boolean sentToPlayers;
+    
+    // [TISCM] Newlight - start
+    private java.util.Map<EntityPlayerMP, int[]> lightTrackings = new java.util.HashMap<>();
+    private final java.util.Map<EntityPlayerMP, int[]> neighborLightTrackings = new java.util.HashMap<>();
+    // [TISCM] Newlight - end
 
+    // TISCM chunkPacketThreshold
+    private final boolean chunkPacketThresholdEnabled;
+    private final int chunkPacketThresholdValue;
+    private final Set<Short> changedBlocksSet = new ShortLinkedOpenHashSet();
+    // TISCM chunkPacketThreshold ends
+
     public PlayerChunkMapEntry(PlayerChunkMap mapIn, int chunkX, int chunkZ)
     {
         this.playerChunkMap = mapIn;
@@ -40,8 +58,19 @@
         ChunkProviderServer chunkproviderserver = mapIn.getWorld().getChunkProvider();
         chunkproviderserver.touch(chunkX, chunkZ);
         this.chunk = chunkproviderserver.getChunk(chunkX, chunkZ, true, false);
+
+        // TISCM chunkPacketThreshold
+        this.chunkPacketThresholdValue = CarpetSettings.chunkPacketThreshold;
+        this.chunkPacketThresholdEnabled = CarpetSettings.chunkPacketThreshold != CarpetSettings.VANILLA_CHUNK_PACKET_THRESHOLD;
     }
 
+    // TISCM chunkPacketThreshold
+    private int getChunkPacketThreshold()
+    {
+        // 64 is the vanilla value
+        return this.chunkPacketThresholdEnabled ? this.chunkPacketThresholdValue : 64;
+    }
+
     public ChunkPos getPos()
     {
         return this.pos;
@@ -64,6 +93,9 @@
 
             if (this.sentToPlayers)
             {
+                // [TISCM] Newlight
+                if (CarpetSettings.newLight)
+                    LightTrackingHooks.addPlayer(player, this, this.playerChunkMap);
                 this.sendToPlayer(player);
             }
         }
@@ -75,6 +107,9 @@
         {
             if (this.sentToPlayers)
             {
+                // [TISCM] Newlight
+                if (CarpetSettings.newLight)
+                    LightTrackingHooks.removePlayer(player, this, this.playerChunkMap);
                 player.connection.sendPacket(new SPacketUnloadChunk(this.pos.x, this.pos.z));
             }
 
@@ -126,8 +161,16 @@
 
                 for (EntityPlayerMP entityplayermp : this.players)
                 {
+                    // [TISCM] Newlight
+                    if (CarpetSettings.newLight)
+                        LightTrackingHooks.addPlayer(entityplayermp, this, this.playerChunkMap);
+                    
                     entityplayermp.connection.sendPacket(packet);
                     this.playerChunkMap.getWorld().getEntityTracker().sendLeashedEntitiesInChunk(entityplayermp, this.chunk);
+    
+                    // [TISCM] Newlight
+                    if (CarpetSettings.newLight)
+                        LightTrackingHooks.sendLightTrackings(this, entityplayermp, this.playerChunkMap);
                 }
             }
 
@@ -141,6 +184,10 @@
         {
             player.connection.sendPacket(new SPacketChunkData(this.chunk, 65535));
             this.playerChunkMap.getWorld().getEntityTracker().sendLeashedEntitiesInChunk(player, this.chunk);
+    
+            // [TISCM] Newlight
+            if (CarpetSettings.newLight)
+                LightTrackingHooks.sendLightTrackings(this, player, this.playerChunkMap);
         }
     }
 
@@ -167,19 +214,31 @@
 
             this.changedSectionFilter |= 1 << (y >> 4);
 
-            if (this.changes < 64)
+            // TISCM changedBlocksList
+            // modified constant 64 into CarpetSettings.chunkPacketThreshold
+            if (this.changes < this.getChunkPacketThreshold())
             {
                 short short1 = (short)(x << 12 | z << 8 | y);
 
-                for (int i = 0; i < this.changes; ++i)
+                // TISCM changedBlocksList
+                if (this.chunkPacketThresholdEnabled)
                 {
-                    if (this.changedBlocks[i] == short1)
+                    this.changedBlocksSet.add(short1);
+                    this.changes = this.changedBlocksSet.size();
+                }
+                // vanilla
+                else
+                {
+                    for (int i = 0; i < this.changes; ++i)
                     {
-                        return;
+                        if (this.changedBlocks[i] == short1)
+                        {
+                            return;
+                        }
                     }
-                }
 
-                this.changedBlocks[this.changes++] = short1;
+                    this.changedBlocks[this.changes++] = short1;
+                }
             }
         }
     }
@@ -201,6 +260,18 @@
         {
             if (this.changes != 0)
             {
+                // TISCM chunkPacketThreshold
+                if (this.chunkPacketThresholdEnabled)
+                {
+                    this.changedBlocks = new short[this.changedBlocksSet.size()];
+                    int i = 0;
+                    for (Short s: this.changedBlocksSet)
+                    {
+                        this.changedBlocks[i++] = s;
+                    }
+                    this.changedBlocksSet.clear();
+                }
+
                 if (this.changes == 1)
                 {
                     int i = (this.changedBlocks[0] >> 12 & 15) + this.pos.x * 16;
@@ -214,9 +285,14 @@
                         this.sendBlockEntity(this.playerChunkMap.getWorld().getTileEntity(blockpos));
                     }
                 }
-                else if (this.changes == 64)
+                // TISCM chunkPacketThreshold
+                // modified constant 64
+                else if (this.changes == this.getChunkPacketThreshold())
                 {
                     this.sendPacket(new SPacketChunkData(this.chunk, this.changedSectionFilter));
+                    // [TISCM] Newlight
+                    if (CarpetSettings.newLight)
+                        LightTrackingHooks.sendLightTrackings(this, this.changedSectionFilter, this.playerChunkMap);
                 }
                 else
                 {
@@ -309,4 +385,15 @@
 
         return d0;
     }
+    
+    // [TISCM] Newlight - getters
+    public Map<EntityPlayerMP, int[]> getLightTrackings()
+    {
+        return lightTrackings;
+    }
+    
+    public Map<EntityPlayerMP, int[]> getNeighborLightTrackings()
+    {
+        return neighborLightTrackings;
+    }
 }
